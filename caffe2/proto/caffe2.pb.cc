// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "caffe2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {
class TensorProto_SegmentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TensorProto_Segment>
     _instance;
} _TensorProto_Segment_default_instance_;
class TensorProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TensorProto>
     _instance;
} _TensorProto_default_instance_;
class QTensorProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QTensorProto>
     _instance;
} _QTensorProto_default_instance_;
class TensorProtosDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TensorProtos>
     _instance;
} _TensorProtos_default_instance_;
class TensorShapeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TensorShape>
     _instance;
} _TensorShape_default_instance_;
class TensorShapesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TensorShapes>
     _instance;
} _TensorShapes_default_instance_;
class ArgumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Argument>
     _instance;
} _Argument_default_instance_;
class DeviceOptionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeviceOption>
     _instance;
} _DeviceOption_default_instance_;
class OperatorDefDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OperatorDef>
     _instance;
} _OperatorDef_default_instance_;
class NetDefDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetDef>
     _instance;
} _NetDef_default_instance_;
class ExecutionStepDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExecutionStep>
     _instance;
} _ExecutionStep_default_instance_;
class PlanDefDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlanDef>
     _instance;
} _PlanDef_default_instance_;
class BlobProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BlobProto>
     _instance;
} _BlobProto_default_instance_;
class DBReaderProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DBReaderProto>
     _instance;
} _DBReaderProto_default_instance_;

namespace protobuf_caffe2_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto_Segment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto_Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto_Segment, begin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto_Segment, end_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, dims_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, float_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, int32_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, byte_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, string_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, double_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, int64_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, device_detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, segment_),
  ~0u,
  4,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, dims_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, is_signed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, name_),
  ~0u,
  2,
  1,
  4,
  3,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProtos, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProtos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProtos, protos_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShape, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShape, dims_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShape, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShape, unknown_dims_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShape, unknown_shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShape, name_),
  ~0u,
  2,
  ~0u,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShapes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShapes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShapes, shapes_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, f_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, floats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, ints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, strings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, nets_),
  0,
  4,
  3,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, device_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, cuda_gpu_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, random_seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, node_name_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, arg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, device_option_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, engine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, control_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, is_gradient_op_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  3,
  2,
  ~0u,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, num_workers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, device_option_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, arg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, external_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, external_output_),
  0,
  ~0u,
  1,
  3,
  2,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, substep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, network_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, num_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, criteria_network_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, report_net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, report_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, run_every_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, concurrent_substeps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, should_stop_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, only_once_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, create_workspace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, num_concurrent_instances_),
  0,
  ~0u,
  ~0u,
  4,
  1,
  2,
  5,
  9,
  6,
  3,
  7,
  8,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanDef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanDef, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanDef, network_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanDef, execution_step_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, tensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, qtensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, content_num_chunks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, content_chunk_id_),
  0,
  1,
  3,
  2,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBReaderProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBReaderProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBReaderProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBReaderProto, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBReaderProto, db_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBReaderProto, key_),
  0,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(TensorProto_Segment)},
  { 9, 25, sizeof(TensorProto)},
  { 36, 48, sizeof(QTensorProto)},
  { 55, 61, sizeof(TensorProtos)},
  { 62, 72, sizeof(TensorShape)},
  { 77, 83, sizeof(TensorShapes)},
  { 84, 98, sizeof(Argument)},
  { 107, 116, sizeof(DeviceOption)},
  { 120, 134, sizeof(OperatorDef)},
  { 143, 156, sizeof(NetDef)},
  { 164, 182, sizeof(ExecutionStep)},
  { 195, 203, sizeof(PlanDef)},
  { 206, 218, sizeof(BlobProto)},
  { 225, 234, sizeof(DBReaderProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorProto_Segment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QTensorProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorProtos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorShape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorShapes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Argument_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeviceOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OperatorDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecutionStep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlanDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlobProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DBReaderProto_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "caffe2.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TensorProto_Segment_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TensorProto_Segment_default_instance_);_TensorProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TensorProto_default_instance_);_QTensorProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QTensorProto_default_instance_);_TensorProtos_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TensorProtos_default_instance_);_TensorShape_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TensorShape_default_instance_);_TensorShapes_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TensorShapes_default_instance_);_Argument_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Argument_default_instance_);_DeviceOption_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeviceOption_default_instance_);_OperatorDef_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OperatorDef_default_instance_);_NetDef_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetDef_default_instance_);_ExecutionStep_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExecutionStep_default_instance_);_PlanDef_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlanDef_default_instance_);_BlobProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BlobProto_default_instance_);_DBReaderProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DBReaderProto_default_instance_);_TensorProto_default_instance_._instance.get_mutable()->device_detail_ = const_cast< ::caffe2::DeviceOption*>(
      ::caffe2::DeviceOption::internal_default_instance());
  _TensorProto_default_instance_._instance.get_mutable()->segment_ = const_cast< ::caffe2::TensorProto_Segment*>(
      ::caffe2::TensorProto_Segment::internal_default_instance());
  _Argument_default_instance_._instance.get_mutable()->n_ = const_cast< ::caffe2::NetDef*>(
      ::caffe2::NetDef::internal_default_instance());
  _OperatorDef_default_instance_._instance.get_mutable()->device_option_ = const_cast< ::caffe2::DeviceOption*>(
      ::caffe2::DeviceOption::internal_default_instance());
  _NetDef_default_instance_._instance.get_mutable()->device_option_ = const_cast< ::caffe2::DeviceOption*>(
      ::caffe2::DeviceOption::internal_default_instance());
  _BlobProto_default_instance_._instance.get_mutable()->tensor_ = const_cast< ::caffe2::TensorProto*>(
      ::caffe2::TensorProto::internal_default_instance());
  _BlobProto_default_instance_._instance.get_mutable()->qtensor_ = const_cast< ::caffe2::QTensorProto*>(
      ::caffe2::QTensorProto::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014caffe2.proto\022\006caffe2\"\216\004\n\013TensorProto\022\014"
      "\n\004dims\030\001 \003(\003\0226\n\tdata_type\030\002 \001(\0162\034.caffe2"
      ".TensorProto.DataType:\005FLOAT\022\026\n\nfloat_da"
      "ta\030\003 \003(\002B\002\020\001\022\026\n\nint32_data\030\004 \003(\005B\002\020\001\022\021\n\t"
      "byte_data\030\005 \001(\014\022\023\n\013string_data\030\006 \003(\014\022\027\n\013"
      "double_data\030\t \003(\001B\002\020\001\022\026\n\nint64_data\030\n \003("
      "\003B\002\020\001\022\014\n\004name\030\007 \001(\t\022+\n\rdevice_detail\030\010 \001"
      "(\0132\024.caffe2.DeviceOption\022,\n\007segment\030\013 \001("
      "\0132\033.caffe2.TensorProto.Segment\032%\n\007Segmen"
      "t\022\r\n\005begin\030\001 \002(\003\022\013\n\003end\030\002 \002(\003\"\237\001\n\010DataTy"
      "pe\022\r\n\tUNDEFINED\020\000\022\t\n\005FLOAT\020\001\022\t\n\005INT32\020\002\022"
      "\010\n\004BYTE\020\003\022\n\n\006STRING\020\004\022\010\n\004BOOL\020\005\022\t\n\005UINT8"
      "\020\006\022\010\n\004INT8\020\007\022\n\n\006UINT16\020\010\022\t\n\005INT16\020\t\022\t\n\005I"
      "NT64\020\n\022\013\n\007FLOAT16\020\014\022\n\n\006DOUBLE\020\r\"\177\n\014QTens"
      "orProto\022\014\n\004dims\030\001 \003(\003\022\021\n\tprecision\030\002 \002(\005"
      "\022\r\n\005scale\030\003 \002(\001\022\014\n\004bias\030\004 \002(\001\022\021\n\tis_sign"
      "ed\030\005 \002(\010\022\020\n\004data\030\006 \003(\005B\002\020\001\022\014\n\004name\030\007 \001(\t"
      "\"3\n\014TensorProtos\022#\n\006protos\030\001 \003(\0132\023.caffe"
      "2.TensorProto\"\225\001\n\013TensorShape\022\014\n\004dims\030\001 "
      "\003(\003\0226\n\tdata_type\030\002 \001(\0162\034.caffe2.TensorPr"
      "oto.DataType:\005FLOAT\022\024\n\014unknown_dims\030\003 \003("
      "\005\022\034\n\runknown_shape\030\004 \001(\010:\005false\022\014\n\004name\030"
      "\005 \001(\t\"3\n\014TensorShapes\022#\n\006shapes\030\001 \003(\0132\023."
      "caffe2.TensorShape\"\241\001\n\010Argument\022\014\n\004name\030"
      "\001 \001(\t\022\t\n\001f\030\002 \001(\002\022\t\n\001i\030\003 \001(\003\022\t\n\001s\030\004 \001(\014\022\031"
      "\n\001n\030\010 \001(\0132\016.caffe2.NetDef\022\016\n\006floats\030\005 \003("
      "\002\022\014\n\004ints\030\006 \003(\003\022\017\n\007strings\030\007 \003(\014\022\034\n\004nets"
      "\030\t \003(\0132\016.caffe2.NetDef\"c\n\014DeviceOption\022\026"
      "\n\013device_type\030\001 \001(\005:\0010\022\023\n\013cuda_gpu_id\030\002 "
      "\001(\005\022\023\n\013random_seed\030\003 \001(\r\022\021\n\tnode_name\030\004 "
      "\001(\t\"\332\001\n\013OperatorDef\022\r\n\005input\030\001 \003(\t\022\016\n\006ou"
      "tput\030\002 \003(\t\022\014\n\004name\030\003 \001(\t\022\014\n\004type\030\004 \001(\t\022\035"
      "\n\003arg\030\005 \003(\0132\020.caffe2.Argument\022+\n\rdevice_"
      "option\030\006 \001(\0132\024.caffe2.DeviceOption\022\016\n\006en"
      "gine\030\007 \001(\t\022\025\n\rcontrol_input\030\010 \003(\t\022\035\n\016is_"
      "gradient_op\030\t \001(\010:\005false\"\333\001\n\006NetDef\022\014\n\004n"
      "ame\030\001 \001(\t\022\037\n\002op\030\002 \003(\0132\023.caffe2.OperatorD"
      "ef\022\014\n\004type\030\003 \001(\t\022\027\n\013num_workers\030\004 \001(\005B\002\030"
      "\001\022+\n\rdevice_option\030\005 \001(\0132\024.caffe2.Device"
      "Option\022\035\n\003arg\030\006 \003(\0132\020.caffe2.Argument\022\026\n"
      "\016external_input\030\007 \003(\t\022\027\n\017external_output"
      "\030\010 \003(\t\"\317\002\n\rExecutionStep\022\014\n\004name\030\001 \001(\t\022&"
      "\n\007substep\030\002 \003(\0132\025.caffe2.ExecutionStep\022\017"
      "\n\007network\030\003 \003(\t\022\020\n\010num_iter\030\004 \001(\003\022\034\n\020cri"
      "teria_network\030\005 \001(\tB\002\030\001\022\022\n\nreport_net\030\007 "
      "\001(\t\022\027\n\017report_interval\030\010 \001(\005\022\024\n\014run_ever"
      "y_ms\030\013 \001(\003\022\033\n\023concurrent_substeps\030\006 \001(\010\022"
      "\030\n\020should_stop_blob\030\t \001(\t\022\021\n\tonly_once\030\n"
      " \001(\010\022\030\n\020create_workspace\030\014 \001(\010\022 \n\030num_co"
      "ncurrent_instances\030\r \001(\005\"g\n\007PlanDef\022\014\n\004n"
      "ame\030\001 \001(\t\022\037\n\007network\030\002 \003(\0132\016.caffe2.NetD"
      "ef\022-\n\016execution_step\030\003 \003(\0132\025.caffe2.Exec"
      "utionStep\"\272\001\n\tBlobProto\022\014\n\004name\030\001 \001(\t\022\014\n"
      "\004type\030\002 \001(\t\022#\n\006tensor\030\003 \001(\0132\023.caffe2.Ten"
      "sorProto\022\017\n\007content\030\004 \001(\014\022%\n\007qtensor\030\005 \001"
      "(\0132\024.caffe2.QTensorProto\022\032\n\022content_num_"
      "chunks\030\006 \001(\005\022\030\n\020content_chunk_id\030\007 \001(\005\"K"
      "\n\rDBReaderProto\022\014\n\004name\030\001 \001(\t\022\016\n\006source\030"
      "\002 \001(\t\022\017\n\007db_type\030\003 \001(\t\022\013\n\003key\030\004 \001(\t*p\n\nD"
      "eviceType\022\007\n\003CPU\020\000\022\010\n\004CUDA\020\001\022\n\n\006MKLDNN\020\002"
      "\022\n\n\006OPENGL\020\003\022!\n\035COMPILE_TIME_MAX_DEVICE_"
      "TYPES\020\004\022\024\n\rONLY_FOR_TEST\020\305\336\373\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2469);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe2.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_caffe2_2eproto

const ::google::protobuf::EnumDescriptor* TensorProto_DataType_descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_enum_descriptors[0];
}
bool TensorProto_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TensorProto_DataType TensorProto::UNDEFINED;
const TensorProto_DataType TensorProto::FLOAT;
const TensorProto_DataType TensorProto::INT32;
const TensorProto_DataType TensorProto::BYTE;
const TensorProto_DataType TensorProto::STRING;
const TensorProto_DataType TensorProto::BOOL;
const TensorProto_DataType TensorProto::UINT8;
const TensorProto_DataType TensorProto::INT8;
const TensorProto_DataType TensorProto::UINT16;
const TensorProto_DataType TensorProto::INT16;
const TensorProto_DataType TensorProto::INT64;
const TensorProto_DataType TensorProto::FLOAT16;
const TensorProto_DataType TensorProto::DOUBLE;
const TensorProto_DataType TensorProto::DataType_MIN;
const TensorProto_DataType TensorProto::DataType_MAX;
const int TensorProto::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DeviceType_descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_enum_descriptors[1];
}
bool DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 20901701:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorProto_Segment::kBeginFieldNumber;
const int TensorProto_Segment::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorProto_Segment::TensorProto_Segment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.TensorProto.Segment)
}
TensorProto_Segment::TensorProto_Segment(const TensorProto_Segment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&begin_, &from.begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:caffe2.TensorProto.Segment)
}

void TensorProto_Segment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(end_));
}

TensorProto_Segment::~TensorProto_Segment() {
  // @@protoc_insertion_point(destructor:caffe2.TensorProto.Segment)
  SharedDtor();
}

void TensorProto_Segment::SharedDtor() {
}

void TensorProto_Segment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorProto_Segment::descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorProto_Segment& TensorProto_Segment::default_instance() {
  protobuf_caffe2_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorProto_Segment* TensorProto_Segment::New(::google::protobuf::Arena* arena) const {
  TensorProto_Segment* n = new TensorProto_Segment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorProto_Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.TensorProto.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&begin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TensorProto_Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.TensorProto.Segment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 begin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_begin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.TensorProto.Segment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.TensorProto.Segment)
  return false;
#undef DO_
}

void TensorProto_Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.TensorProto.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 begin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->begin(), output);
  }

  // required int64 end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.TensorProto.Segment)
}

::google::protobuf::uint8* TensorProto_Segment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.TensorProto.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->begin(), target);
  }

  // required int64 end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.TensorProto.Segment)
  return target;
}

size_t TensorProto_Segment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe2.TensorProto.Segment)
  size_t total_size = 0;

  if (has_begin()) {
    // required int64 begin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->begin());
  }

  if (has_end()) {
    // required int64 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  return total_size;
}
size_t TensorProto_Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.TensorProto.Segment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 begin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->begin());

    // required int64 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorProto_Segment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.TensorProto.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorProto_Segment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorProto_Segment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.TensorProto.Segment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.TensorProto.Segment)
    MergeFrom(*source);
  }
}

void TensorProto_Segment::MergeFrom(const TensorProto_Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.TensorProto.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      begin_ = from.begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TensorProto_Segment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.TensorProto.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorProto_Segment::CopyFrom(const TensorProto_Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.TensorProto.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProto_Segment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TensorProto_Segment::Swap(TensorProto_Segment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorProto_Segment::InternalSwap(TensorProto_Segment* other) {
  using std::swap;
  swap(begin_, other->begin_);
  swap(end_, other->end_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorProto_Segment::GetMetadata() const {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorProto_Segment

// required int64 begin = 1;
bool TensorProto_Segment::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TensorProto_Segment::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
void TensorProto_Segment::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
void TensorProto_Segment::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
  clear_has_begin();
}
::google::protobuf::int64 TensorProto_Segment::begin() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.Segment.begin)
  return begin_;
}
void TensorProto_Segment::set_begin(::google::protobuf::int64 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.Segment.begin)
}

// required int64 end = 2;
bool TensorProto_Segment::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TensorProto_Segment::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
void TensorProto_Segment::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
void TensorProto_Segment::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
  clear_has_end();
}
::google::protobuf::int64 TensorProto_Segment::end() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.Segment.end)
  return end_;
}
void TensorProto_Segment::set_end(::google::protobuf::int64 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.Segment.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorProto::kDimsFieldNumber;
const int TensorProto::kDataTypeFieldNumber;
const int TensorProto::kFloatDataFieldNumber;
const int TensorProto::kInt32DataFieldNumber;
const int TensorProto::kByteDataFieldNumber;
const int TensorProto::kStringDataFieldNumber;
const int TensorProto::kDoubleDataFieldNumber;
const int TensorProto::kInt64DataFieldNumber;
const int TensorProto::kNameFieldNumber;
const int TensorProto::kDeviceDetailFieldNumber;
const int TensorProto::kSegmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorProto::TensorProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.TensorProto)
}
TensorProto::TensorProto(const TensorProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dims_(from.dims_),
      float_data_(from.float_data_),
      int32_data_(from.int32_data_),
      string_data_(from.string_data_),
      double_data_(from.double_data_),
      int64_data_(from.int64_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  byte_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_byte_data()) {
    byte_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byte_data_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_device_detail()) {
    device_detail_ = new ::caffe2::DeviceOption(*from.device_detail_);
  } else {
    device_detail_ = NULL;
  }
  if (from.has_segment()) {
    segment_ = new ::caffe2::TensorProto_Segment(*from.segment_);
  } else {
    segment_ = NULL;
  }
  data_type_ = from.data_type_;
  // @@protoc_insertion_point(copy_constructor:caffe2.TensorProto)
}

void TensorProto::SharedCtor() {
  _cached_size_ = 0;
  byte_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_detail_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segment_) -
      reinterpret_cast<char*>(&device_detail_)) + sizeof(segment_));
  data_type_ = 1;
}

TensorProto::~TensorProto() {
  // @@protoc_insertion_point(destructor:caffe2.TensorProto)
  SharedDtor();
}

void TensorProto::SharedDtor() {
  byte_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_detail_;
  if (this != internal_default_instance()) delete segment_;
}

void TensorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorProto::descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorProto& TensorProto::default_instance() {
  protobuf_caffe2_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorProto* TensorProto::New(::google::protobuf::Arena* arena) const {
  TensorProto* n = new TensorProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.TensorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  float_data_.Clear();
  int32_data_.Clear();
  string_data_.Clear();
  double_data_.Clear();
  int64_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!byte_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*byte_data_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(device_detail_ != NULL);
      device_detail_->::caffe2::DeviceOption::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(segment_ != NULL);
      segment_->::caffe2::TensorProto_Segment::Clear();
    }
    data_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TensorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.TensorProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dims = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_dims())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe2::TensorProto_DataType_IsValid(value)) {
            set_data_type(static_cast< ::caffe2::TensorProto_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float float_data = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_float_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 int32_data = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_int32_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes byte_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byte_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes string_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_string_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.TensorProto.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe2.DeviceOption device_detail = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double double_data = 9 [packed = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 74u, input, this->mutable_double_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 int64_data = 10 [packed = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_int64_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 82u, input, this->mutable_int64_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe2.TensorProto.Segment segment = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_segment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.TensorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.TensorProto)
  return false;
#undef DO_
}

void TensorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.TensorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  for (int i = 0, n = this->dims_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->dims(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // repeated float float_data = 3 [packed = true];
  if (this->float_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _float_data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->float_data().data(), this->float_data_size(), output);
  }

  // repeated int32 int32_data = 4 [packed = true];
  if (this->int32_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _int32_data_cached_byte_size_));
  }
  for (int i = 0, n = this->int32_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->int32_data(i), output);
  }

  // optional bytes byte_data = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->byte_data(), output);
  }

  // repeated bytes string_data = 6;
  for (int i = 0, n = this->string_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->string_data(i), output);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.TensorProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional .caffe2.DeviceOption device_detail = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->device_detail_, output);
  }

  // repeated double double_data = 9 [packed = true];
  if (this->double_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _double_data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->double_data().data(), this->double_data_size(), output);
  }

  // repeated int64 int64_data = 10 [packed = true];
  if (this->int64_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _int64_data_cached_byte_size_));
  }
  for (int i = 0, n = this->int64_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->int64_data(i), output);
  }

  // optional .caffe2.TensorProto.Segment segment = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->segment_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.TensorProto)
}

::google::protobuf::uint8* TensorProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.TensorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(1, this->dims_, target);

  cached_has_bits = _has_bits_[0];
  // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // repeated float float_data = 3 [packed = true];
  if (this->float_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _float_data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->float_data_, target);
  }

  // repeated int32 int32_data = 4 [packed = true];
  if (this->int32_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _int32_data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->int32_data_, target);
  }

  // optional bytes byte_data = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->byte_data(), target);
  }

  // repeated bytes string_data = 6;
  for (int i = 0, n = this->string_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->string_data(i), target);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.TensorProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional .caffe2.DeviceOption device_detail = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->device_detail_, deterministic, target);
  }

  // repeated double double_data = 9 [packed = true];
  if (this->double_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _double_data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_data_, target);
  }

  // repeated int64 int64_data = 10 [packed = true];
  if (this->int64_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _int64_data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->int64_data_, target);
  }

  // optional .caffe2.TensorProto.Segment segment = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->segment_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.TensorProto)
  return target;
}

size_t TensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.TensorProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 dims = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->dims_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dims_size());
    total_size += data_size;
  }

  // repeated float float_data = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->float_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _float_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 int32_data = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->int32_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int32_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes string_data = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_data_size());
  for (int i = 0, n = this->string_data_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->string_data(i));
  }

  // repeated double double_data = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->double_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 int64_data = 10 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->int64_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int64_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes byte_data = 5;
    if (has_byte_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->byte_data());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe2.DeviceOption device_detail = 8;
    if (has_device_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_detail_);
    }

    // optional .caffe2.TensorProto.Segment segment = 11;
    if (has_segment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->segment_);
    }

    // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.TensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.TensorProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.TensorProto)
    MergeFrom(*source);
  }
}

void TensorProto::MergeFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.TensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  float_data_.MergeFrom(from.float_data_);
  int32_data_.MergeFrom(from.int32_data_);
  string_data_.MergeFrom(from.string_data_);
  double_data_.MergeFrom(from.double_data_);
  int64_data_.MergeFrom(from.int64_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_byte_data();
      byte_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byte_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_device_detail()->::caffe2::DeviceOption::MergeFrom(from.device_detail());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_segment()->::caffe2::TensorProto_Segment::MergeFrom(from.segment());
    }
    if (cached_has_bits & 0x00000010u) {
      data_type_ = from.data_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TensorProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.TensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorProto::CopyFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.TensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProto::IsInitialized() const {
  if (has_segment()) {
    if (!this->segment_->IsInitialized()) return false;
  }
  return true;
}

void TensorProto::Swap(TensorProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorProto::InternalSwap(TensorProto* other) {
  using std::swap;
  dims_.InternalSwap(&other->dims_);
  float_data_.InternalSwap(&other->float_data_);
  int32_data_.InternalSwap(&other->int32_data_);
  string_data_.InternalSwap(&other->string_data_);
  double_data_.InternalSwap(&other->double_data_);
  int64_data_.InternalSwap(&other->int64_data_);
  byte_data_.Swap(&other->byte_data_);
  name_.Swap(&other->name_);
  swap(device_detail_, other->device_detail_);
  swap(segment_, other->segment_);
  swap(data_type_, other->data_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorProto::GetMetadata() const {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorProto

// repeated int64 dims = 1;
int TensorProto::dims_size() const {
  return dims_.size();
}
void TensorProto::clear_dims() {
  dims_.Clear();
}
::google::protobuf::int64 TensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.dims)
  return dims_.Get(index);
}
void TensorProto::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.dims)
}
void TensorProto::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.dims)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorProto::dims() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.dims)
  return dims_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.dims)
  return &dims_;
}

// optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
bool TensorProto::has_data_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TensorProto::set_has_data_type() {
  _has_bits_[0] |= 0x00000010u;
}
void TensorProto::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void TensorProto::clear_data_type() {
  data_type_ = 1;
  clear_has_data_type();
}
::caffe2::TensorProto_DataType TensorProto::data_type() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.data_type)
  return static_cast< ::caffe2::TensorProto_DataType >(data_type_);
}
void TensorProto::set_data_type(::caffe2::TensorProto_DataType value) {
  assert(::caffe2::TensorProto_DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.data_type)
}

// repeated float float_data = 3 [packed = true];
int TensorProto::float_data_size() const {
  return float_data_.size();
}
void TensorProto::clear_float_data() {
  float_data_.Clear();
}
float TensorProto::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.float_data)
  return float_data_.Get(index);
}
void TensorProto::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.float_data)
}
void TensorProto::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.float_data)
}
const ::google::protobuf::RepeatedField< float >&
TensorProto::float_data() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.float_data)
  return float_data_;
}
::google::protobuf::RepeatedField< float >*
TensorProto::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.float_data)
  return &float_data_;
}

// repeated int32 int32_data = 4 [packed = true];
int TensorProto::int32_data_size() const {
  return int32_data_.size();
}
void TensorProto::clear_int32_data() {
  int32_data_.Clear();
}
::google::protobuf::int32 TensorProto::int32_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.int32_data)
  return int32_data_.Get(index);
}
void TensorProto::set_int32_data(int index, ::google::protobuf::int32 value) {
  int32_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.int32_data)
}
void TensorProto::add_int32_data(::google::protobuf::int32 value) {
  int32_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.int32_data)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorProto::int32_data() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.int32_data)
  return int32_data_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorProto::mutable_int32_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.int32_data)
  return &int32_data_;
}

// optional bytes byte_data = 5;
bool TensorProto::has_byte_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TensorProto::set_has_byte_data() {
  _has_bits_[0] |= 0x00000001u;
}
void TensorProto::clear_has_byte_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void TensorProto::clear_byte_data() {
  byte_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_byte_data();
}
const ::std::string& TensorProto::byte_data() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.byte_data)
  return byte_data_.GetNoArena();
}
void TensorProto::set_byte_data(const ::std::string& value) {
  set_has_byte_data();
  byte_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.byte_data)
}
#if LANG_CXX11
void TensorProto::set_byte_data(::std::string&& value) {
  set_has_byte_data();
  byte_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.TensorProto.byte_data)
}
#endif
void TensorProto::set_byte_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_byte_data();
  byte_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.TensorProto.byte_data)
}
void TensorProto::set_byte_data(const void* value, size_t size) {
  set_has_byte_data();
  byte_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.TensorProto.byte_data)
}
::std::string* TensorProto::mutable_byte_data() {
  set_has_byte_data();
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProto.byte_data)
  return byte_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TensorProto::release_byte_data() {
  // @@protoc_insertion_point(field_release:caffe2.TensorProto.byte_data)
  clear_has_byte_data();
  return byte_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorProto::set_allocated_byte_data(::std::string* byte_data) {
  if (byte_data != NULL) {
    set_has_byte_data();
  } else {
    clear_has_byte_data();
  }
  byte_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byte_data);
  // @@protoc_insertion_point(field_set_allocated:caffe2.TensorProto.byte_data)
}

// repeated bytes string_data = 6;
int TensorProto::string_data_size() const {
  return string_data_.size();
}
void TensorProto::clear_string_data() {
  string_data_.Clear();
}
const ::std::string& TensorProto::string_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.string_data)
  return string_data_.Get(index);
}
::std::string* TensorProto::mutable_string_data(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProto.string_data)
  return string_data_.Mutable(index);
}
void TensorProto::set_string_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.string_data)
  string_data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TensorProto::set_string_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.string_data)
  string_data_.Mutable(index)->assign(std::move(value));
}
#endif
void TensorProto::set_string_data(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.TensorProto.string_data)
}
void TensorProto::set_string_data(int index, const void* value, size_t size) {
  string_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.TensorProto.string_data)
}
::std::string* TensorProto::add_string_data() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.TensorProto.string_data)
  return string_data_.Add();
}
void TensorProto::add_string_data(const ::std::string& value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.string_data)
}
#if LANG_CXX11
void TensorProto::add_string_data(::std::string&& value) {
  string_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.string_data)
}
#endif
void TensorProto::add_string_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.TensorProto.string_data)
}
void TensorProto::add_string_data(const void* value, size_t size) {
  string_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.TensorProto.string_data)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TensorProto::string_data() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.string_data)
  return string_data_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TensorProto::mutable_string_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.string_data)
  return &string_data_;
}

// repeated double double_data = 9 [packed = true];
int TensorProto::double_data_size() const {
  return double_data_.size();
}
void TensorProto::clear_double_data() {
  double_data_.Clear();
}
double TensorProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.double_data)
  return double_data_.Get(index);
}
void TensorProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.double_data)
}
void TensorProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.double_data)
}
const ::google::protobuf::RepeatedField< double >&
TensorProto::double_data() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.double_data)
  return double_data_;
}
::google::protobuf::RepeatedField< double >*
TensorProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.double_data)
  return &double_data_;
}

// repeated int64 int64_data = 10 [packed = true];
int TensorProto::int64_data_size() const {
  return int64_data_.size();
}
void TensorProto::clear_int64_data() {
  int64_data_.Clear();
}
::google::protobuf::int64 TensorProto::int64_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.int64_data)
  return int64_data_.Get(index);
}
void TensorProto::set_int64_data(int index, ::google::protobuf::int64 value) {
  int64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.int64_data)
}
void TensorProto::add_int64_data(::google::protobuf::int64 value) {
  int64_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.int64_data)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorProto::int64_data() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.int64_data)
  return int64_data_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorProto::mutable_int64_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.int64_data)
  return &int64_data_;
}

// optional string name = 7;
bool TensorProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TensorProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void TensorProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void TensorProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& TensorProto::name() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.name)
  return name_.GetNoArena();
}
void TensorProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.name)
}
#if LANG_CXX11
void TensorProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.TensorProto.name)
}
#endif
void TensorProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.TensorProto.name)
}
void TensorProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.TensorProto.name)
}
::std::string* TensorProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TensorProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.TensorProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.TensorProto.name)
}

// optional .caffe2.DeviceOption device_detail = 8;
bool TensorProto::has_device_detail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TensorProto::set_has_device_detail() {
  _has_bits_[0] |= 0x00000004u;
}
void TensorProto::clear_has_device_detail() {
  _has_bits_[0] &= ~0x00000004u;
}
void TensorProto::clear_device_detail() {
  if (device_detail_ != NULL) device_detail_->::caffe2::DeviceOption::Clear();
  clear_has_device_detail();
}
const ::caffe2::DeviceOption& TensorProto::device_detail() const {
  const ::caffe2::DeviceOption* p = device_detail_;
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.device_detail)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe2::DeviceOption*>(
      &::caffe2::_DeviceOption_default_instance_);
}
::caffe2::DeviceOption* TensorProto::mutable_device_detail() {
  set_has_device_detail();
  if (device_detail_ == NULL) {
    device_detail_ = new ::caffe2::DeviceOption;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProto.device_detail)
  return device_detail_;
}
::caffe2::DeviceOption* TensorProto::release_device_detail() {
  // @@protoc_insertion_point(field_release:caffe2.TensorProto.device_detail)
  clear_has_device_detail();
  ::caffe2::DeviceOption* temp = device_detail_;
  device_detail_ = NULL;
  return temp;
}
void TensorProto::set_allocated_device_detail(::caffe2::DeviceOption* device_detail) {
  delete device_detail_;
  device_detail_ = device_detail;
  if (device_detail) {
    set_has_device_detail();
  } else {
    clear_has_device_detail();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.TensorProto.device_detail)
}

// optional .caffe2.TensorProto.Segment segment = 11;
bool TensorProto::has_segment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TensorProto::set_has_segment() {
  _has_bits_[0] |= 0x00000008u;
}
void TensorProto::clear_has_segment() {
  _has_bits_[0] &= ~0x00000008u;
}
void TensorProto::clear_segment() {
  if (segment_ != NULL) segment_->::caffe2::TensorProto_Segment::Clear();
  clear_has_segment();
}
const ::caffe2::TensorProto_Segment& TensorProto::segment() const {
  const ::caffe2::TensorProto_Segment* p = segment_;
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.segment)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe2::TensorProto_Segment*>(
      &::caffe2::_TensorProto_Segment_default_instance_);
}
::caffe2::TensorProto_Segment* TensorProto::mutable_segment() {
  set_has_segment();
  if (segment_ == NULL) {
    segment_ = new ::caffe2::TensorProto_Segment;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProto.segment)
  return segment_;
}
::caffe2::TensorProto_Segment* TensorProto::release_segment() {
  // @@protoc_insertion_point(field_release:caffe2.TensorProto.segment)
  clear_has_segment();
  ::caffe2::TensorProto_Segment* temp = segment_;
  segment_ = NULL;
  return temp;
}
void TensorProto::set_allocated_segment(::caffe2::TensorProto_Segment* segment) {
  delete segment_;
  segment_ = segment;
  if (segment) {
    set_has_segment();
  } else {
    clear_has_segment();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.TensorProto.segment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QTensorProto::kDimsFieldNumber;
const int QTensorProto::kPrecisionFieldNumber;
const int QTensorProto::kScaleFieldNumber;
const int QTensorProto::kBiasFieldNumber;
const int QTensorProto::kIsSignedFieldNumber;
const int QTensorProto::kDataFieldNumber;
const int QTensorProto::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QTensorProto::QTensorProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.QTensorProto)
}
QTensorProto::QTensorProto(const QTensorProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dims_(from.dims_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&scale_, &from.scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&bias_) -
    reinterpret_cast<char*>(&scale_)) + sizeof(bias_));
  // @@protoc_insertion_point(copy_constructor:caffe2.QTensorProto)
}

void QTensorProto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bias_) -
      reinterpret_cast<char*>(&scale_)) + sizeof(bias_));
}

QTensorProto::~QTensorProto() {
  // @@protoc_insertion_point(destructor:caffe2.QTensorProto)
  SharedDtor();
}

void QTensorProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QTensorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QTensorProto::descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QTensorProto& QTensorProto::default_instance() {
  protobuf_caffe2_2eproto::InitDefaults();
  return *internal_default_instance();
}

QTensorProto* QTensorProto::New(::google::protobuf::Arena* arena) const {
  QTensorProto* n = new QTensorProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QTensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.QTensorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  data_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bias_) -
        reinterpret_cast<char*>(&scale_)) + sizeof(bias_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QTensorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.QTensorProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dims = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_dims())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 precision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double scale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bias = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_bias();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_signed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_signed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_signed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 data = 6 [packed = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.QTensorProto.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.QTensorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.QTensorProto)
  return false;
#undef DO_
}

void QTensorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.QTensorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  for (int i = 0, n = this->dims_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->dims(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 precision = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->precision(), output);
  }

  // required double scale = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->scale(), output);
  }

  // required double bias = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bias(), output);
  }

  // required bool is_signed = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_signed(), output);
  }

  // repeated int32 data = 6 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
  }
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data(i), output);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.QTensorProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.QTensorProto)
}

::google::protobuf::uint8* QTensorProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.QTensorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(1, this->dims_, target);

  cached_has_bits = _has_bits_[0];
  // required int32 precision = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->precision(), target);
  }

  // required double scale = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->scale(), target);
  }

  // required double bias = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bias(), target);
  }

  // required bool is_signed = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_signed(), target);
  }

  // repeated int32 data = 6 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->data_, target);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.QTensorProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.QTensorProto)
  return target;
}

size_t QTensorProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe2.QTensorProto)
  size_t total_size = 0;

  if (has_scale()) {
    // required double scale = 3;
    total_size += 1 + 8;
  }

  if (has_precision()) {
    // required int32 precision = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->precision());
  }

  if (has_is_signed()) {
    // required bool is_signed = 5;
    total_size += 1 + 1;
  }

  if (has_bias()) {
    // required double bias = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t QTensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.QTensorProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required double scale = 3;
    total_size += 1 + 8;

    // required int32 precision = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->precision());

    // required bool is_signed = 5;
    total_size += 1 + 1;

    // required double bias = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int64 dims = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->dims_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dims_size());
    total_size += data_size;
  }

  // repeated int32 data = 6 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // optional string name = 7;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QTensorProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.QTensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  const QTensorProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QTensorProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.QTensorProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.QTensorProto)
    MergeFrom(*source);
  }
}

void QTensorProto::MergeFrom(const QTensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.QTensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_signed_ = from.is_signed_;
    }
    if (cached_has_bits & 0x00000010u) {
      bias_ = from.bias_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QTensorProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.QTensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QTensorProto::CopyFrom(const QTensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.QTensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QTensorProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  return true;
}

void QTensorProto::Swap(QTensorProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QTensorProto::InternalSwap(QTensorProto* other) {
  using std::swap;
  dims_.InternalSwap(&other->dims_);
  data_.InternalSwap(&other->data_);
  name_.Swap(&other->name_);
  swap(scale_, other->scale_);
  swap(precision_, other->precision_);
  swap(is_signed_, other->is_signed_);
  swap(bias_, other->bias_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QTensorProto::GetMetadata() const {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QTensorProto

// repeated int64 dims = 1;
int QTensorProto::dims_size() const {
  return dims_.size();
}
void QTensorProto::clear_dims() {
  dims_.Clear();
}
::google::protobuf::int64 QTensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.QTensorProto.dims)
  return dims_.Get(index);
}
void QTensorProto::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.QTensorProto.dims)
}
void QTensorProto::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.QTensorProto.dims)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
QTensorProto::dims() const {
  // @@protoc_insertion_point(field_list:caffe2.QTensorProto.dims)
  return dims_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
QTensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.QTensorProto.dims)
  return &dims_;
}

// required int32 precision = 2;
bool QTensorProto::has_precision() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QTensorProto::set_has_precision() {
  _has_bits_[0] |= 0x00000004u;
}
void QTensorProto::clear_has_precision() {
  _has_bits_[0] &= ~0x00000004u;
}
void QTensorProto::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
::google::protobuf::int32 QTensorProto::precision() const {
  // @@protoc_insertion_point(field_get:caffe2.QTensorProto.precision)
  return precision_;
}
void QTensorProto::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:caffe2.QTensorProto.precision)
}

// required double scale = 3;
bool QTensorProto::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QTensorProto::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void QTensorProto::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void QTensorProto::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
double QTensorProto::scale() const {
  // @@protoc_insertion_point(field_get:caffe2.QTensorProto.scale)
  return scale_;
}
void QTensorProto::set_scale(double value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe2.QTensorProto.scale)
}

// required double bias = 4;
bool QTensorProto::has_bias() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QTensorProto::set_has_bias() {
  _has_bits_[0] |= 0x00000010u;
}
void QTensorProto::clear_has_bias() {
  _has_bits_[0] &= ~0x00000010u;
}
void QTensorProto::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
double QTensorProto::bias() const {
  // @@protoc_insertion_point(field_get:caffe2.QTensorProto.bias)
  return bias_;
}
void QTensorProto::set_bias(double value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:caffe2.QTensorProto.bias)
}

// required bool is_signed = 5;
bool QTensorProto::has_is_signed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QTensorProto::set_has_is_signed() {
  _has_bits_[0] |= 0x00000008u;
}
void QTensorProto::clear_has_is_signed() {
  _has_bits_[0] &= ~0x00000008u;
}
void QTensorProto::clear_is_signed() {
  is_signed_ = false;
  clear_has_is_signed();
}
bool QTensorProto::is_signed() const {
  // @@protoc_insertion_point(field_get:caffe2.QTensorProto.is_signed)
  return is_signed_;
}
void QTensorProto::set_is_signed(bool value) {
  set_has_is_signed();
  is_signed_ = value;
  // @@protoc_insertion_point(field_set:caffe2.QTensorProto.is_signed)
}

// repeated int32 data = 6 [packed = true];
int QTensorProto::data_size() const {
  return data_.size();
}
void QTensorProto::clear_data() {
  data_.Clear();
}
::google::protobuf::int32 QTensorProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.QTensorProto.data)
  return data_.Get(index);
}
void QTensorProto::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.QTensorProto.data)
}
void QTensorProto::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.QTensorProto.data)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QTensorProto::data() const {
  // @@protoc_insertion_point(field_list:caffe2.QTensorProto.data)
  return data_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QTensorProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.QTensorProto.data)
  return &data_;
}

// optional string name = 7;
bool QTensorProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QTensorProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void QTensorProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void QTensorProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& QTensorProto::name() const {
  // @@protoc_insertion_point(field_get:caffe2.QTensorProto.name)
  return name_.GetNoArena();
}
void QTensorProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.QTensorProto.name)
}
#if LANG_CXX11
void QTensorProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.QTensorProto.name)
}
#endif
void QTensorProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.QTensorProto.name)
}
void QTensorProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.QTensorProto.name)
}
::std::string* QTensorProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.QTensorProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QTensorProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.QTensorProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QTensorProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.QTensorProto.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorProtos::kProtosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorProtos::TensorProtos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.TensorProtos)
}
TensorProtos::TensorProtos(const TensorProtos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      protos_(from.protos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe2.TensorProtos)
}

void TensorProtos::SharedCtor() {
  _cached_size_ = 0;
}

TensorProtos::~TensorProtos() {
  // @@protoc_insertion_point(destructor:caffe2.TensorProtos)
  SharedDtor();
}

void TensorProtos::SharedDtor() {
}

void TensorProtos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorProtos::descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorProtos& TensorProtos::default_instance() {
  protobuf_caffe2_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorProtos* TensorProtos::New(::google::protobuf::Arena* arena) const {
  TensorProtos* n = new TensorProtos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorProtos::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.TensorProtos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TensorProtos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.TensorProtos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe2.TensorProto protos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_protos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.TensorProtos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.TensorProtos)
  return false;
#undef DO_
}

void TensorProtos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.TensorProtos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe2.TensorProto protos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->protos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->protos(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.TensorProtos)
}

::google::protobuf::uint8* TensorProtos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.TensorProtos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe2.TensorProto protos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->protos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->protos(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.TensorProtos)
  return target;
}

size_t TensorProtos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.TensorProtos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe2.TensorProto protos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->protos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->protos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorProtos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.TensorProtos)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorProtos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorProtos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.TensorProtos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.TensorProtos)
    MergeFrom(*source);
  }
}

void TensorProtos::MergeFrom(const TensorProtos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.TensorProtos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  protos_.MergeFrom(from.protos_);
}

void TensorProtos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.TensorProtos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorProtos::CopyFrom(const TensorProtos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.TensorProtos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProtos::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->protos())) return false;
  return true;
}

void TensorProtos::Swap(TensorProtos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorProtos::InternalSwap(TensorProtos* other) {
  using std::swap;
  protos_.InternalSwap(&other->protos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorProtos::GetMetadata() const {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorProtos

// repeated .caffe2.TensorProto protos = 1;
int TensorProtos::protos_size() const {
  return protos_.size();
}
void TensorProtos::clear_protos() {
  protos_.Clear();
}
const ::caffe2::TensorProto& TensorProtos::protos(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProtos.protos)
  return protos_.Get(index);
}
::caffe2::TensorProto* TensorProtos::mutable_protos(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProtos.protos)
  return protos_.Mutable(index);
}
::caffe2::TensorProto* TensorProtos::add_protos() {
  // @@protoc_insertion_point(field_add:caffe2.TensorProtos.protos)
  return protos_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::TensorProto >*
TensorProtos::mutable_protos() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProtos.protos)
  return &protos_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::TensorProto >&
TensorProtos::protos() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProtos.protos)
  return protos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorShape::kDimsFieldNumber;
const int TensorShape::kDataTypeFieldNumber;
const int TensorShape::kUnknownDimsFieldNumber;
const int TensorShape::kUnknownShapeFieldNumber;
const int TensorShape::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorShape::TensorShape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.TensorShape)
}
TensorShape::TensorShape(const TensorShape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dims_(from.dims_),
      unknown_dims_(from.unknown_dims_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&unknown_shape_, &from.unknown_shape_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
    reinterpret_cast<char*>(&unknown_shape_)) + sizeof(data_type_));
  // @@protoc_insertion_point(copy_constructor:caffe2.TensorShape)
}

void TensorShape::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unknown_shape_ = false;
  data_type_ = 1;
}

TensorShape::~TensorShape() {
  // @@protoc_insertion_point(destructor:caffe2.TensorShape)
  SharedDtor();
}

void TensorShape::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TensorShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorShape::descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorShape& TensorShape::default_instance() {
  protobuf_caffe2_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorShape* TensorShape::New(::google::protobuf::Arena* arena) const {
  TensorShape* n = new TensorShape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorShape::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.TensorShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  unknown_dims_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    unknown_shape_ = false;
    data_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TensorShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.TensorShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dims = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_dims())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe2::TensorProto_DataType_IsValid(value)) {
            set_data_type(static_cast< ::caffe2::TensorProto_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 unknown_dims = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_unknown_dims())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_unknown_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool unknown_shape = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_unknown_shape();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unknown_shape_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.TensorShape.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.TensorShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.TensorShape)
  return false;
#undef DO_
}

void TensorShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.TensorShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  for (int i = 0, n = this->dims_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->dims(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // repeated int32 unknown_dims = 3;
  for (int i = 0, n = this->unknown_dims_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->unknown_dims(i), output);
  }

  // optional bool unknown_shape = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unknown_shape(), output);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.TensorShape.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.TensorShape)
}

::google::protobuf::uint8* TensorShape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.TensorShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(1, this->dims_, target);

  cached_has_bits = _has_bits_[0];
  // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // repeated int32 unknown_dims = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->unknown_dims_, target);

  // optional bool unknown_shape = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unknown_shape(), target);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.TensorShape.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.TensorShape)
  return target;
}

size_t TensorShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.TensorShape)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 dims = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->dims_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dims_size());
    total_size += data_size;
  }

  // repeated int32 unknown_dims = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->unknown_dims_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->unknown_dims_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool unknown_shape = 4 [default = false];
    if (has_unknown_shape()) {
      total_size += 1 + 1;
    }

    // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.TensorShape)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorShape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorShape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.TensorShape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.TensorShape)
    MergeFrom(*source);
  }
}

void TensorShape::MergeFrom(const TensorShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.TensorShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  unknown_dims_.MergeFrom(from.unknown_dims_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      unknown_shape_ = from.unknown_shape_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_type_ = from.data_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TensorShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.TensorShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorShape::CopyFrom(const TensorShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.TensorShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorShape::IsInitialized() const {
  return true;
}

void TensorShape::Swap(TensorShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorShape::InternalSwap(TensorShape* other) {
  using std::swap;
  dims_.InternalSwap(&other->dims_);
  unknown_dims_.InternalSwap(&other->unknown_dims_);
  name_.Swap(&other->name_);
  swap(unknown_shape_, other->unknown_shape_);
  swap(data_type_, other->data_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorShape::GetMetadata() const {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorShape

// repeated int64 dims = 1;
int TensorShape::dims_size() const {
  return dims_.size();
}
void TensorShape::clear_dims() {
  dims_.Clear();
}
::google::protobuf::int64 TensorShape::dims(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorShape.dims)
  return dims_.Get(index);
}
void TensorShape::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorShape.dims)
}
void TensorShape::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorShape.dims)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorShape::dims() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorShape.dims)
  return dims_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorShape::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorShape.dims)
  return &dims_;
}

// optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
bool TensorShape::has_data_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TensorShape::set_has_data_type() {
  _has_bits_[0] |= 0x00000004u;
}
void TensorShape::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void TensorShape::clear_data_type() {
  data_type_ = 1;
  clear_has_data_type();
}
::caffe2::TensorProto_DataType TensorShape::data_type() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorShape.data_type)
  return static_cast< ::caffe2::TensorProto_DataType >(data_type_);
}
void TensorShape::set_data_type(::caffe2::TensorProto_DataType value) {
  assert(::caffe2::TensorProto_DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TensorShape.data_type)
}

// repeated int32 unknown_dims = 3;
int TensorShape::unknown_dims_size() const {
  return unknown_dims_.size();
}
void TensorShape::clear_unknown_dims() {
  unknown_dims_.Clear();
}
::google::protobuf::int32 TensorShape::unknown_dims(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorShape.unknown_dims)
  return unknown_dims_.Get(index);
}
void TensorShape::set_unknown_dims(int index, ::google::protobuf::int32 value) {
  unknown_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorShape.unknown_dims)
}
void TensorShape::add_unknown_dims(::google::protobuf::int32 value) {
  unknown_dims_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorShape.unknown_dims)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorShape::unknown_dims() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorShape.unknown_dims)
  return unknown_dims_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorShape::mutable_unknown_dims() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorShape.unknown_dims)
  return &unknown_dims_;
}

// optional bool unknown_shape = 4 [default = false];
bool TensorShape::has_unknown_shape() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TensorShape::set_has_unknown_shape() {
  _has_bits_[0] |= 0x00000002u;
}
void TensorShape::clear_has_unknown_shape() {
  _has_bits_[0] &= ~0x00000002u;
}
void TensorShape::clear_unknown_shape() {
  unknown_shape_ = false;
  clear_has_unknown_shape();
}
bool TensorShape::unknown_shape() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorShape.unknown_shape)
  return unknown_shape_;
}
void TensorShape::set_unknown_shape(bool value) {
  set_has_unknown_shape();
  unknown_shape_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TensorShape.unknown_shape)
}

// optional string name = 5;
bool TensorShape::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TensorShape::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TensorShape::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TensorShape::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& TensorShape::name() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorShape.name)
  return name_.GetNoArena();
}
void TensorShape::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.TensorShape.name)
}
#if LANG_CXX11
void TensorShape::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.TensorShape.name)
}
#endif
void TensorShape::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.TensorShape.name)
}
void TensorShape::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.TensorShape.name)
}
::std::string* TensorShape::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.TensorShape.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TensorShape::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.TensorShape.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorShape::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.TensorShape.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorShapes::kShapesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorShapes::TensorShapes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.TensorShapes)
}
TensorShapes::TensorShapes(const TensorShapes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      shapes_(from.shapes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe2.TensorShapes)
}

void TensorShapes::SharedCtor() {
  _cached_size_ = 0;
}

TensorShapes::~TensorShapes() {
  // @@protoc_insertion_point(destructor:caffe2.TensorShapes)
  SharedDtor();
}

void TensorShapes::SharedDtor() {
}

void TensorShapes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorShapes::descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorShapes& TensorShapes::default_instance() {
  protobuf_caffe2_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorShapes* TensorShapes::New(::google::protobuf::Arena* arena) const {
  TensorShapes* n = new TensorShapes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorShapes::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.TensorShapes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shapes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TensorShapes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.TensorShapes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe2.TensorShape shapes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shapes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.TensorShapes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.TensorShapes)
  return false;
#undef DO_
}

void TensorShapes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.TensorShapes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe2.TensorShape shapes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shapes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shapes(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.TensorShapes)
}

::google::protobuf::uint8* TensorShapes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.TensorShapes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe2.TensorShape shapes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shapes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->shapes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.TensorShapes)
  return target;
}

size_t TensorShapes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.TensorShapes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe2.TensorShape shapes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->shapes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shapes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorShapes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.TensorShapes)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorShapes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorShapes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.TensorShapes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.TensorShapes)
    MergeFrom(*source);
  }
}

void TensorShapes::MergeFrom(const TensorShapes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.TensorShapes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shapes_.MergeFrom(from.shapes_);
}

void TensorShapes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.TensorShapes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorShapes::CopyFrom(const TensorShapes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.TensorShapes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorShapes::IsInitialized() const {
  return true;
}

void TensorShapes::Swap(TensorShapes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorShapes::InternalSwap(TensorShapes* other) {
  using std::swap;
  shapes_.InternalSwap(&other->shapes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorShapes::GetMetadata() const {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorShapes

// repeated .caffe2.TensorShape shapes = 1;
int TensorShapes::shapes_size() const {
  return shapes_.size();
}
void TensorShapes::clear_shapes() {
  shapes_.Clear();
}
const ::caffe2::TensorShape& TensorShapes::shapes(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorShapes.shapes)
  return shapes_.Get(index);
}
::caffe2::TensorShape* TensorShapes::mutable_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.TensorShapes.shapes)
  return shapes_.Mutable(index);
}
::caffe2::TensorShape* TensorShapes::add_shapes() {
  // @@protoc_insertion_point(field_add:caffe2.TensorShapes.shapes)
  return shapes_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::TensorShape >*
TensorShapes::mutable_shapes() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorShapes.shapes)
  return &shapes_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::TensorShape >&
TensorShapes::shapes() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorShapes.shapes)
  return shapes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Argument::kNameFieldNumber;
const int Argument::kFFieldNumber;
const int Argument::kIFieldNumber;
const int Argument::kSFieldNumber;
const int Argument::kNFieldNumber;
const int Argument::kFloatsFieldNumber;
const int Argument::kIntsFieldNumber;
const int Argument::kStringsFieldNumber;
const int Argument::kNetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Argument::Argument()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.Argument)
}
Argument::Argument(const Argument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      floats_(from.floats_),
      ints_(from.ints_),
      strings_(from.strings_),
      nets_(from.nets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_s()) {
    s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
  }
  if (from.has_n()) {
    n_ = new ::caffe2::NetDef(*from.n_);
  } else {
    n_ = NULL;
  }
  ::memcpy(&i_, &from.i_,
    static_cast<size_t>(reinterpret_cast<char*>(&f_) -
    reinterpret_cast<char*>(&i_)) + sizeof(f_));
  // @@protoc_insertion_point(copy_constructor:caffe2.Argument)
}

void Argument::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&n_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_) -
      reinterpret_cast<char*>(&n_)) + sizeof(f_));
}

Argument::~Argument() {
  // @@protoc_insertion_point(destructor:caffe2.Argument)
  SharedDtor();
}

void Argument::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete n_;
}

void Argument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Argument::descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Argument& Argument::default_instance() {
  protobuf_caffe2_2eproto::InitDefaults();
  return *internal_default_instance();
}

Argument* Argument::New(::google::protobuf::Arena* arena) const {
  Argument* n = new Argument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Argument::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.Argument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  floats_.Clear();
  ints_.Clear();
  strings_.Clear();
  nets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!s_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*s_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(n_ != NULL);
      n_->::caffe2::NetDef::Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&i_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f_) -
        reinterpret_cast<char*>(&i_)) + sizeof(f_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Argument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.Argument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.Argument.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float f = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_f();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 i = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_i();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes s = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float floats = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_floats())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_floats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 ints = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48u, input, this->mutable_ints())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes strings = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_strings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe2.NetDef n = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_n()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe2.NetDef nets = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.Argument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.Argument)
  return false;
#undef DO_
}

void Argument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.Argument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.Argument.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float f = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->f(), output);
  }

  // optional int64 i = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->i(), output);
  }

  // optional bytes s = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->s(), output);
  }

  // repeated float floats = 5;
  for (int i = 0, n = this->floats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->floats(i), output);
  }

  // repeated int64 ints = 6;
  for (int i = 0, n = this->ints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->ints(i), output);
  }

  // repeated bytes strings = 7;
  for (int i = 0, n = this->strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->strings(i), output);
  }

  // optional .caffe2.NetDef n = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->n_, output);
  }

  // repeated .caffe2.NetDef nets = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->nets(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.Argument)
}

::google::protobuf::uint8* Argument::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.Argument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.Argument.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float f = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->f(), target);
  }

  // optional int64 i = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->i(), target);
  }

  // optional bytes s = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->s(), target);
  }

  // repeated float floats = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(5, this->floats_, target);

  // repeated int64 ints = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(6, this->ints_, target);

  // repeated bytes strings = 7;
  for (int i = 0, n = this->strings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->strings(i), target);
  }

  // optional .caffe2.NetDef n = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->n_, deterministic, target);
  }

  // repeated .caffe2.NetDef nets = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->nets(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.Argument)
  return target;
}

size_t Argument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.Argument)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float floats = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->floats_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->floats_size());
    total_size += data_size;
  }

  // repeated int64 ints = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->ints_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ints_size());
    total_size += data_size;
  }

  // repeated bytes strings = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->strings_size());
  for (int i = 0, n = this->strings_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->strings(i));
  }

  // repeated .caffe2.NetDef nets = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->nets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nets(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes s = 4;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->s());
    }

    // optional .caffe2.NetDef n = 8;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->n_);
    }

    // optional int64 i = 3;
    if (has_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->i());
    }

    // optional float f = 2;
    if (has_f()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Argument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.Argument)
  GOOGLE_DCHECK_NE(&from, this);
  const Argument* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Argument>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.Argument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.Argument)
    MergeFrom(*source);
  }
}

void Argument::MergeFrom(const Argument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.Argument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  floats_.MergeFrom(from.floats_);
  ints_.MergeFrom(from.ints_);
  strings_.MergeFrom(from.strings_);
  nets_.MergeFrom(from.nets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_s();
      s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_n()->::caffe2::NetDef::MergeFrom(from.n());
    }
    if (cached_has_bits & 0x00000008u) {
      i_ = from.i_;
    }
    if (cached_has_bits & 0x00000010u) {
      f_ = from.f_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Argument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.Argument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Argument::CopyFrom(const Argument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.Argument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Argument::IsInitialized() const {
  return true;
}

void Argument::Swap(Argument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Argument::InternalSwap(Argument* other) {
  using std::swap;
  floats_.InternalSwap(&other->floats_);
  ints_.InternalSwap(&other->ints_);
  strings_.InternalSwap(&other->strings_);
  nets_.InternalSwap(&other->nets_);
  name_.Swap(&other->name_);
  s_.Swap(&other->s_);
  swap(n_, other->n_);
  swap(i_, other->i_);
  swap(f_, other->f_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Argument::GetMetadata() const {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Argument

// optional string name = 1;
bool Argument::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Argument::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Argument::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Argument::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Argument::name() const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.name)
  return name_.GetNoArena();
}
void Argument::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.Argument.name)
}
#if LANG_CXX11
void Argument::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.Argument.name)
}
#endif
void Argument::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.Argument.name)
}
void Argument::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.Argument.name)
}
::std::string* Argument::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.Argument.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Argument::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.Argument.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Argument::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.Argument.name)
}

// optional float f = 2;
bool Argument::has_f() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Argument::set_has_f() {
  _has_bits_[0] |= 0x00000010u;
}
void Argument::clear_has_f() {
  _has_bits_[0] &= ~0x00000010u;
}
void Argument::clear_f() {
  f_ = 0;
  clear_has_f();
}
float Argument::f() const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.f)
  return f_;
}
void Argument::set_f(float value) {
  set_has_f();
  f_ = value;
  // @@protoc_insertion_point(field_set:caffe2.Argument.f)
}

// optional int64 i = 3;
bool Argument::has_i() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Argument::set_has_i() {
  _has_bits_[0] |= 0x00000008u;
}
void Argument::clear_has_i() {
  _has_bits_[0] &= ~0x00000008u;
}
void Argument::clear_i() {
  i_ = GOOGLE_LONGLONG(0);
  clear_has_i();
}
::google::protobuf::int64 Argument::i() const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.i)
  return i_;
}
void Argument::set_i(::google::protobuf::int64 value) {
  set_has_i();
  i_ = value;
  // @@protoc_insertion_point(field_set:caffe2.Argument.i)
}

// optional bytes s = 4;
bool Argument::has_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Argument::set_has_s() {
  _has_bits_[0] |= 0x00000002u;
}
void Argument::clear_has_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void Argument::clear_s() {
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_s();
}
const ::std::string& Argument::s() const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.s)
  return s_.GetNoArena();
}
void Argument::set_s(const ::std::string& value) {
  set_has_s();
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.Argument.s)
}
#if LANG_CXX11
void Argument::set_s(::std::string&& value) {
  set_has_s();
  s_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.Argument.s)
}
#endif
void Argument::set_s(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_s();
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.Argument.s)
}
void Argument::set_s(const void* value, size_t size) {
  set_has_s();
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.Argument.s)
}
::std::string* Argument::mutable_s() {
  set_has_s();
  // @@protoc_insertion_point(field_mutable:caffe2.Argument.s)
  return s_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Argument::release_s() {
  // @@protoc_insertion_point(field_release:caffe2.Argument.s)
  clear_has_s();
  return s_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Argument::set_allocated_s(::std::string* s) {
  if (s != NULL) {
    set_has_s();
  } else {
    clear_has_s();
  }
  s_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:caffe2.Argument.s)
}

// optional .caffe2.NetDef n = 8;
bool Argument::has_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Argument::set_has_n() {
  _has_bits_[0] |= 0x00000004u;
}
void Argument::clear_has_n() {
  _has_bits_[0] &= ~0x00000004u;
}
void Argument::clear_n() {
  if (n_ != NULL) n_->::caffe2::NetDef::Clear();
  clear_has_n();
}
const ::caffe2::NetDef& Argument::n() const {
  const ::caffe2::NetDef* p = n_;
  // @@protoc_insertion_point(field_get:caffe2.Argument.n)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe2::NetDef*>(
      &::caffe2::_NetDef_default_instance_);
}
::caffe2::NetDef* Argument::mutable_n() {
  set_has_n();
  if (n_ == NULL) {
    n_ = new ::caffe2::NetDef;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.Argument.n)
  return n_;
}
::caffe2::NetDef* Argument::release_n() {
  // @@protoc_insertion_point(field_release:caffe2.Argument.n)
  clear_has_n();
  ::caffe2::NetDef* temp = n_;
  n_ = NULL;
  return temp;
}
void Argument::set_allocated_n(::caffe2::NetDef* n) {
  delete n_;
  n_ = n;
  if (n) {
    set_has_n();
  } else {
    clear_has_n();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.Argument.n)
}

// repeated float floats = 5;
int Argument::floats_size() const {
  return floats_.size();
}
void Argument::clear_floats() {
  floats_.Clear();
}
float Argument::floats(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.floats)
  return floats_.Get(index);
}
void Argument::set_floats(int index, float value) {
  floats_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.Argument.floats)
}
void Argument::add_floats(float value) {
  floats_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.Argument.floats)
}
const ::google::protobuf::RepeatedField< float >&
Argument::floats() const {
  // @@protoc_insertion_point(field_list:caffe2.Argument.floats)
  return floats_;
}
::google::protobuf::RepeatedField< float >*
Argument::mutable_floats() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.Argument.floats)
  return &floats_;
}

// repeated int64 ints = 6;
int Argument::ints_size() const {
  return ints_.size();
}
void Argument::clear_ints() {
  ints_.Clear();
}
::google::protobuf::int64 Argument::ints(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.ints)
  return ints_.Get(index);
}
void Argument::set_ints(int index, ::google::protobuf::int64 value) {
  ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.Argument.ints)
}
void Argument::add_ints(::google::protobuf::int64 value) {
  ints_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.Argument.ints)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Argument::ints() const {
  // @@protoc_insertion_point(field_list:caffe2.Argument.ints)
  return ints_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Argument::mutable_ints() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.Argument.ints)
  return &ints_;
}

// repeated bytes strings = 7;
int Argument::strings_size() const {
  return strings_.size();
}
void Argument::clear_strings() {
  strings_.Clear();
}
const ::std::string& Argument::strings(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.strings)
  return strings_.Get(index);
}
::std::string* Argument::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.Argument.strings)
  return strings_.Mutable(index);
}
void Argument::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.Argument.strings)
  strings_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Argument::set_strings(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe2.Argument.strings)
  strings_.Mutable(index)->assign(std::move(value));
}
#endif
void Argument::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.Argument.strings)
}
void Argument::set_strings(int index, const void* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.Argument.strings)
}
::std::string* Argument::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.Argument.strings)
  return strings_.Add();
}
void Argument::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.Argument.strings)
}
#if LANG_CXX11
void Argument::add_strings(::std::string&& value) {
  strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe2.Argument.strings)
}
#endif
void Argument::add_strings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.Argument.strings)
}
void Argument::add_strings(const void* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.Argument.strings)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Argument::strings() const {
  // @@protoc_insertion_point(field_list:caffe2.Argument.strings)
  return strings_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Argument::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.Argument.strings)
  return &strings_;
}

// repeated .caffe2.NetDef nets = 9;
int Argument::nets_size() const {
  return nets_.size();
}
void Argument::clear_nets() {
  nets_.Clear();
}
const ::caffe2::NetDef& Argument::nets(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.nets)
  return nets_.Get(index);
}
::caffe2::NetDef* Argument::mutable_nets(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.Argument.nets)
  return nets_.Mutable(index);
}
::caffe2::NetDef* Argument::add_nets() {
  // @@protoc_insertion_point(field_add:caffe2.Argument.nets)
  return nets_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::NetDef >*
Argument::mutable_nets() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.Argument.nets)
  return &nets_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::NetDef >&
Argument::nets() const {
  // @@protoc_insertion_point(field_list:caffe2.Argument.nets)
  return nets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceOption::kDeviceTypeFieldNumber;
const int DeviceOption::kCudaGpuIdFieldNumber;
const int DeviceOption::kRandomSeedFieldNumber;
const int DeviceOption::kNodeNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceOption::DeviceOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.DeviceOption)
}
DeviceOption::DeviceOption(const DeviceOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_node_name()) {
    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  ::memcpy(&device_type_, &from.device_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&random_seed_) -
    reinterpret_cast<char*>(&device_type_)) + sizeof(random_seed_));
  // @@protoc_insertion_point(copy_constructor:caffe2.DeviceOption)
}

void DeviceOption::SharedCtor() {
  _cached_size_ = 0;
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_seed_) -
      reinterpret_cast<char*>(&device_type_)) + sizeof(random_seed_));
}

DeviceOption::~DeviceOption() {
  // @@protoc_insertion_point(destructor:caffe2.DeviceOption)
  SharedDtor();
}

void DeviceOption::SharedDtor() {
  node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceOption::descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceOption& DeviceOption::default_instance() {
  protobuf_caffe2_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceOption* DeviceOption::New(::google::protobuf::Arena* arena) const {
  DeviceOption* n = new DeviceOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceOption::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.DeviceOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_node_name()) {
    GOOGLE_DCHECK(!node_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*node_name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&device_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&random_seed_) -
        reinterpret_cast<char*>(&device_type_)) + sizeof(random_seed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.DeviceOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 device_type = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_device_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cuda_gpu_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cuda_gpu_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cuda_gpu_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 random_seed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_random_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string node_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_name().data(), static_cast<int>(this->node_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.DeviceOption.node_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.DeviceOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.DeviceOption)
  return false;
#undef DO_
}

void DeviceOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.DeviceOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 device_type = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device_type(), output);
  }

  // optional int32 cuda_gpu_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cuda_gpu_id(), output);
  }

  // optional uint32 random_seed = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->random_seed(), output);
  }

  // optional string node_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.DeviceOption.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->node_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.DeviceOption)
}

::google::protobuf::uint8* DeviceOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.DeviceOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 device_type = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->device_type(), target);
  }

  // optional int32 cuda_gpu_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cuda_gpu_id(), target);
  }

  // optional uint32 random_seed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->random_seed(), target);
  }

  // optional string node_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.DeviceOption.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->node_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.DeviceOption)
  return target;
}

size_t DeviceOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.DeviceOption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string node_name = 4;
    if (has_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_name());
    }

    // optional int32 device_type = 1 [default = 0];
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_type());
    }

    // optional int32 cuda_gpu_id = 2;
    if (has_cuda_gpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cuda_gpu_id());
    }

    // optional uint32 random_seed = 3;
    if (has_random_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_seed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.DeviceOption)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.DeviceOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.DeviceOption)
    MergeFrom(*source);
  }
}

void DeviceOption::MergeFrom(const DeviceOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.DeviceOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_node_name();
      node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      device_type_ = from.device_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      cuda_gpu_id_ = from.cuda_gpu_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      random_seed_ = from.random_seed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.DeviceOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceOption::CopyFrom(const DeviceOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.DeviceOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceOption::IsInitialized() const {
  return true;
}

void DeviceOption::Swap(DeviceOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceOption::InternalSwap(DeviceOption* other) {
  using std::swap;
  node_name_.Swap(&other->node_name_);
  swap(device_type_, other->device_type_);
  swap(cuda_gpu_id_, other->cuda_gpu_id_);
  swap(random_seed_, other->random_seed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceOption::GetMetadata() const {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceOption

// optional int32 device_type = 1 [default = 0];
bool DeviceOption::has_device_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceOption::set_has_device_type() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceOption::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceOption::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
::google::protobuf::int32 DeviceOption::device_type() const {
  // @@protoc_insertion_point(field_get:caffe2.DeviceOption.device_type)
  return device_type_;
}
void DeviceOption::set_device_type(::google::protobuf::int32 value) {
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:caffe2.DeviceOption.device_type)
}

// optional int32 cuda_gpu_id = 2;
bool DeviceOption::has_cuda_gpu_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceOption::set_has_cuda_gpu_id() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceOption::clear_has_cuda_gpu_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceOption::clear_cuda_gpu_id() {
  cuda_gpu_id_ = 0;
  clear_has_cuda_gpu_id();
}
::google::protobuf::int32 DeviceOption::cuda_gpu_id() const {
  // @@protoc_insertion_point(field_get:caffe2.DeviceOption.cuda_gpu_id)
  return cuda_gpu_id_;
}
void DeviceOption::set_cuda_gpu_id(::google::protobuf::int32 value) {
  set_has_cuda_gpu_id();
  cuda_gpu_id_ = value;
  // @@protoc_insertion_point(field_set:caffe2.DeviceOption.cuda_gpu_id)
}

// optional uint32 random_seed = 3;
bool DeviceOption::has_random_seed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceOption::set_has_random_seed() {
  _has_bits_[0] |= 0x00000008u;
}
void DeviceOption::clear_has_random_seed() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeviceOption::clear_random_seed() {
  random_seed_ = 0u;
  clear_has_random_seed();
}
::google::protobuf::uint32 DeviceOption::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe2.DeviceOption.random_seed)
  return random_seed_;
}
void DeviceOption::set_random_seed(::google::protobuf::uint32 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe2.DeviceOption.random_seed)
}

// optional string node_name = 4;
bool DeviceOption::has_node_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceOption::set_has_node_name() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceOption::clear_has_node_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceOption::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_node_name();
}
const ::std::string& DeviceOption::node_name() const {
  // @@protoc_insertion_point(field_get:caffe2.DeviceOption.node_name)
  return node_name_.GetNoArena();
}
void DeviceOption::set_node_name(const ::std::string& value) {
  set_has_node_name();
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.DeviceOption.node_name)
}
#if LANG_CXX11
void DeviceOption::set_node_name(::std::string&& value) {
  set_has_node_name();
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.DeviceOption.node_name)
}
#endif
void DeviceOption::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_node_name();
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.DeviceOption.node_name)
}
void DeviceOption::set_node_name(const char* value, size_t size) {
  set_has_node_name();
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.DeviceOption.node_name)
}
::std::string* DeviceOption::mutable_node_name() {
  set_has_node_name();
  // @@protoc_insertion_point(field_mutable:caffe2.DeviceOption.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceOption::release_node_name() {
  // @@protoc_insertion_point(field_release:caffe2.DeviceOption.node_name)
  clear_has_node_name();
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceOption::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    set_has_node_name();
  } else {
    clear_has_node_name();
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.DeviceOption.node_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperatorDef::kInputFieldNumber;
const int OperatorDef::kOutputFieldNumber;
const int OperatorDef::kNameFieldNumber;
const int OperatorDef::kTypeFieldNumber;
const int OperatorDef::kArgFieldNumber;
const int OperatorDef::kDeviceOptionFieldNumber;
const int OperatorDef::kEngineFieldNumber;
const int OperatorDef::kControlInputFieldNumber;
const int OperatorDef::kIsGradientOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperatorDef::OperatorDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.OperatorDef)
}
OperatorDef::OperatorDef(const OperatorDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      input_(from.input_),
      output_(from.output_),
      arg_(from.arg_),
      control_input_(from.control_input_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  engine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_engine()) {
    engine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.engine_);
  }
  if (from.has_device_option()) {
    device_option_ = new ::caffe2::DeviceOption(*from.device_option_);
  } else {
    device_option_ = NULL;
  }
  is_gradient_op_ = from.is_gradient_op_;
  // @@protoc_insertion_point(copy_constructor:caffe2.OperatorDef)
}

void OperatorDef::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  engine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_gradient_op_) -
      reinterpret_cast<char*>(&device_option_)) + sizeof(is_gradient_op_));
}

OperatorDef::~OperatorDef() {
  // @@protoc_insertion_point(destructor:caffe2.OperatorDef)
  SharedDtor();
}

void OperatorDef::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  engine_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_option_;
}

void OperatorDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperatorDef::descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperatorDef& OperatorDef::default_instance() {
  protobuf_caffe2_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperatorDef* OperatorDef::New(::google::protobuf::Arena* arena) const {
  OperatorDef* n = new OperatorDef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperatorDef::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.OperatorDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  output_.Clear();
  arg_.Clear();
  control_input_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!engine_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*engine_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(device_option_ != NULL);
      device_option_->::caffe2::DeviceOption::Clear();
    }
  }
  is_gradient_op_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperatorDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.OperatorDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input(this->input_size() - 1).data(),
            static_cast<int>(this->input(this->input_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.OperatorDef.input");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string output = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output(this->output_size() - 1).data(),
            static_cast<int>(this->output(this->output_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.OperatorDef.output");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.OperatorDef.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.OperatorDef.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe2.Argument arg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe2.DeviceOption device_option = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_option()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string engine = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_engine()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->engine().data(), static_cast<int>(this->engine().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.OperatorDef.engine");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string control_input = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_control_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->control_input(this->control_input_size() - 1).data(),
            static_cast<int>(this->control_input(this->control_input_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.OperatorDef.control_input");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_gradient_op = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_is_gradient_op();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gradient_op_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.OperatorDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.OperatorDef)
  return false;
#undef DO_
}

void OperatorDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.OperatorDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input = 1;
  for (int i = 0, n = this->input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), static_cast<int>(this->input(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.OperatorDef.input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->input(i), output);
  }

  // repeated string output = 2;
  for (int i = 0, n = this->output_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output(i).data(), static_cast<int>(this->output(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.OperatorDef.output");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->output(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.OperatorDef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.OperatorDef.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->type(), output);
  }

  // repeated .caffe2.Argument arg = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arg_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arg(static_cast<int>(i)), output);
  }

  // optional .caffe2.DeviceOption device_option = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->device_option_, output);
  }

  // optional string engine = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->engine().data(), static_cast<int>(this->engine().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.OperatorDef.engine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->engine(), output);
  }

  // repeated string control_input = 8;
  for (int i = 0, n = this->control_input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->control_input(i).data(), static_cast<int>(this->control_input(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.OperatorDef.control_input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->control_input(i), output);
  }

  // optional bool is_gradient_op = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_gradient_op(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.OperatorDef)
}

::google::protobuf::uint8* OperatorDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.OperatorDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input = 1;
  for (int i = 0, n = this->input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), static_cast<int>(this->input(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.OperatorDef.input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->input(i), target);
  }

  // repeated string output = 2;
  for (int i = 0, n = this->output_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output(i).data(), static_cast<int>(this->output(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.OperatorDef.output");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->output(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.OperatorDef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.OperatorDef.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // repeated .caffe2.Argument arg = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arg_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->arg(static_cast<int>(i)), deterministic, target);
  }

  // optional .caffe2.DeviceOption device_option = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->device_option_, deterministic, target);
  }

  // optional string engine = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->engine().data(), static_cast<int>(this->engine().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.OperatorDef.engine");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->engine(), target);
  }

  // repeated string control_input = 8;
  for (int i = 0, n = this->control_input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->control_input(i).data(), static_cast<int>(this->control_input(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.OperatorDef.control_input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->control_input(i), target);
  }

  // optional bool is_gradient_op = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_gradient_op(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.OperatorDef)
  return target;
}

size_t OperatorDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.OperatorDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string input = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_size());
  for (int i = 0, n = this->input_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated string output = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->output_size());
  for (int i = 0, n = this->output_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->output(i));
  }

  // repeated .caffe2.Argument arg = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->arg_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arg(static_cast<int>(i)));
    }
  }

  // repeated string control_input = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->control_input_size());
  for (int i = 0, n = this->control_input_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->control_input(i));
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string engine = 7;
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->engine());
    }

    // optional .caffe2.DeviceOption device_option = 6;
    if (has_device_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_option_);
    }

    // optional bool is_gradient_op = 9 [default = false];
    if (has_is_gradient_op()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperatorDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.OperatorDef)
  GOOGLE_DCHECK_NE(&from, this);
  const OperatorDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperatorDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.OperatorDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.OperatorDef)
    MergeFrom(*source);
  }
}

void OperatorDef::MergeFrom(const OperatorDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.OperatorDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  arg_.MergeFrom(from.arg_);
  control_input_.MergeFrom(from.control_input_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_engine();
      engine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.engine_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_device_option()->::caffe2::DeviceOption::MergeFrom(from.device_option());
    }
    if (cached_has_bits & 0x00000010u) {
      is_gradient_op_ = from.is_gradient_op_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OperatorDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.OperatorDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatorDef::CopyFrom(const OperatorDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.OperatorDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatorDef::IsInitialized() const {
  return true;
}

void OperatorDef::Swap(OperatorDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperatorDef::InternalSwap(OperatorDef* other) {
  using std::swap;
  input_.InternalSwap(&other->input_);
  output_.InternalSwap(&other->output_);
  arg_.InternalSwap(&other->arg_);
  control_input_.InternalSwap(&other->control_input_);
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  engine_.Swap(&other->engine_);
  swap(device_option_, other->device_option_);
  swap(is_gradient_op_, other->is_gradient_op_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperatorDef::GetMetadata() const {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperatorDef

// repeated string input = 1;
int OperatorDef::input_size() const {
  return input_.size();
}
void OperatorDef::clear_input() {
  input_.Clear();
}
const ::std::string& OperatorDef::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.input)
  return input_.Get(index);
}
::std::string* OperatorDef::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.input)
  return input_.Mutable(index);
}
void OperatorDef::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.input)
  input_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void OperatorDef::set_input(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.input)
  input_.Mutable(index)->assign(std::move(value));
}
#endif
void OperatorDef::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.input)
}
void OperatorDef::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.input)
}
::std::string* OperatorDef::add_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.OperatorDef.input)
  return input_.Add();
}
void OperatorDef::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.OperatorDef.input)
}
#if LANG_CXX11
void OperatorDef::add_input(::std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe2.OperatorDef.input)
}
#endif
void OperatorDef::add_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.OperatorDef.input)
}
void OperatorDef::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.OperatorDef.input)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OperatorDef::input() const {
  // @@protoc_insertion_point(field_list:caffe2.OperatorDef.input)
  return input_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OperatorDef::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.OperatorDef.input)
  return &input_;
}

// repeated string output = 2;
int OperatorDef::output_size() const {
  return output_.size();
}
void OperatorDef::clear_output() {
  output_.Clear();
}
const ::std::string& OperatorDef::output(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.output)
  return output_.Get(index);
}
::std::string* OperatorDef::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.output)
  return output_.Mutable(index);
}
void OperatorDef::set_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.output)
  output_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void OperatorDef::set_output(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.output)
  output_.Mutable(index)->assign(std::move(value));
}
#endif
void OperatorDef::set_output(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.output)
}
void OperatorDef::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.output)
}
::std::string* OperatorDef::add_output() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.OperatorDef.output)
  return output_.Add();
}
void OperatorDef::add_output(const ::std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.OperatorDef.output)
}
#if LANG_CXX11
void OperatorDef::add_output(::std::string&& value) {
  output_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe2.OperatorDef.output)
}
#endif
void OperatorDef::add_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.OperatorDef.output)
}
void OperatorDef::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.OperatorDef.output)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OperatorDef::output() const {
  // @@protoc_insertion_point(field_list:caffe2.OperatorDef.output)
  return output_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OperatorDef::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.OperatorDef.output)
  return &output_;
}

// optional string name = 3;
bool OperatorDef::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OperatorDef::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void OperatorDef::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void OperatorDef::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& OperatorDef::name() const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.name)
  return name_.GetNoArena();
}
void OperatorDef::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.name)
}
#if LANG_CXX11
void OperatorDef::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.OperatorDef.name)
}
#endif
void OperatorDef::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.name)
}
void OperatorDef::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.name)
}
::std::string* OperatorDef::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperatorDef::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.OperatorDef.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperatorDef::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.OperatorDef.name)
}

// optional string type = 4;
bool OperatorDef::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OperatorDef::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void OperatorDef::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void OperatorDef::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& OperatorDef::type() const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.type)
  return type_.GetNoArena();
}
void OperatorDef::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.type)
}
#if LANG_CXX11
void OperatorDef::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.OperatorDef.type)
}
#endif
void OperatorDef::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.type)
}
void OperatorDef::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.type)
}
::std::string* OperatorDef::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperatorDef::release_type() {
  // @@protoc_insertion_point(field_release:caffe2.OperatorDef.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperatorDef::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.OperatorDef.type)
}

// repeated .caffe2.Argument arg = 5;
int OperatorDef::arg_size() const {
  return arg_.size();
}
void OperatorDef::clear_arg() {
  arg_.Clear();
}
const ::caffe2::Argument& OperatorDef::arg(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.arg)
  return arg_.Get(index);
}
::caffe2::Argument* OperatorDef::mutable_arg(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.arg)
  return arg_.Mutable(index);
}
::caffe2::Argument* OperatorDef::add_arg() {
  // @@protoc_insertion_point(field_add:caffe2.OperatorDef.arg)
  return arg_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::Argument >*
OperatorDef::mutable_arg() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.OperatorDef.arg)
  return &arg_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >&
OperatorDef::arg() const {
  // @@protoc_insertion_point(field_list:caffe2.OperatorDef.arg)
  return arg_;
}

// optional .caffe2.DeviceOption device_option = 6;
bool OperatorDef::has_device_option() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OperatorDef::set_has_device_option() {
  _has_bits_[0] |= 0x00000008u;
}
void OperatorDef::clear_has_device_option() {
  _has_bits_[0] &= ~0x00000008u;
}
void OperatorDef::clear_device_option() {
  if (device_option_ != NULL) device_option_->::caffe2::DeviceOption::Clear();
  clear_has_device_option();
}
const ::caffe2::DeviceOption& OperatorDef::device_option() const {
  const ::caffe2::DeviceOption* p = device_option_;
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.device_option)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe2::DeviceOption*>(
      &::caffe2::_DeviceOption_default_instance_);
}
::caffe2::DeviceOption* OperatorDef::mutable_device_option() {
  set_has_device_option();
  if (device_option_ == NULL) {
    device_option_ = new ::caffe2::DeviceOption;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.device_option)
  return device_option_;
}
::caffe2::DeviceOption* OperatorDef::release_device_option() {
  // @@protoc_insertion_point(field_release:caffe2.OperatorDef.device_option)
  clear_has_device_option();
  ::caffe2::DeviceOption* temp = device_option_;
  device_option_ = NULL;
  return temp;
}
void OperatorDef::set_allocated_device_option(::caffe2::DeviceOption* device_option) {
  delete device_option_;
  device_option_ = device_option;
  if (device_option) {
    set_has_device_option();
  } else {
    clear_has_device_option();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.OperatorDef.device_option)
}

// optional string engine = 7;
bool OperatorDef::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OperatorDef::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
void OperatorDef::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
void OperatorDef::clear_engine() {
  engine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_engine();
}
const ::std::string& OperatorDef::engine() const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.engine)
  return engine_.GetNoArena();
}
void OperatorDef::set_engine(const ::std::string& value) {
  set_has_engine();
  engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.engine)
}
#if LANG_CXX11
void OperatorDef::set_engine(::std::string&& value) {
  set_has_engine();
  engine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.OperatorDef.engine)
}
#endif
void OperatorDef::set_engine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_engine();
  engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.engine)
}
void OperatorDef::set_engine(const char* value, size_t size) {
  set_has_engine();
  engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.engine)
}
::std::string* OperatorDef::mutable_engine() {
  set_has_engine();
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.engine)
  return engine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperatorDef::release_engine() {
  // @@protoc_insertion_point(field_release:caffe2.OperatorDef.engine)
  clear_has_engine();
  return engine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperatorDef::set_allocated_engine(::std::string* engine) {
  if (engine != NULL) {
    set_has_engine();
  } else {
    clear_has_engine();
  }
  engine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), engine);
  // @@protoc_insertion_point(field_set_allocated:caffe2.OperatorDef.engine)
}

// repeated string control_input = 8;
int OperatorDef::control_input_size() const {
  return control_input_.size();
}
void OperatorDef::clear_control_input() {
  control_input_.Clear();
}
const ::std::string& OperatorDef::control_input(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.control_input)
  return control_input_.Get(index);
}
::std::string* OperatorDef::mutable_control_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.control_input)
  return control_input_.Mutable(index);
}
void OperatorDef::set_control_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.control_input)
  control_input_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void OperatorDef::set_control_input(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.control_input)
  control_input_.Mutable(index)->assign(std::move(value));
}
#endif
void OperatorDef::set_control_input(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  control_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.control_input)
}
void OperatorDef::set_control_input(int index, const char* value, size_t size) {
  control_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.control_input)
}
::std::string* OperatorDef::add_control_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.OperatorDef.control_input)
  return control_input_.Add();
}
void OperatorDef::add_control_input(const ::std::string& value) {
  control_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.OperatorDef.control_input)
}
#if LANG_CXX11
void OperatorDef::add_control_input(::std::string&& value) {
  control_input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe2.OperatorDef.control_input)
}
#endif
void OperatorDef::add_control_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  control_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.OperatorDef.control_input)
}
void OperatorDef::add_control_input(const char* value, size_t size) {
  control_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.OperatorDef.control_input)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OperatorDef::control_input() const {
  // @@protoc_insertion_point(field_list:caffe2.OperatorDef.control_input)
  return control_input_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OperatorDef::mutable_control_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.OperatorDef.control_input)
  return &control_input_;
}

// optional bool is_gradient_op = 9 [default = false];
bool OperatorDef::has_is_gradient_op() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OperatorDef::set_has_is_gradient_op() {
  _has_bits_[0] |= 0x00000010u;
}
void OperatorDef::clear_has_is_gradient_op() {
  _has_bits_[0] &= ~0x00000010u;
}
void OperatorDef::clear_is_gradient_op() {
  is_gradient_op_ = false;
  clear_has_is_gradient_op();
}
bool OperatorDef::is_gradient_op() const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.is_gradient_op)
  return is_gradient_op_;
}
void OperatorDef::set_is_gradient_op(bool value) {
  set_has_is_gradient_op();
  is_gradient_op_ = value;
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.is_gradient_op)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetDef::kNameFieldNumber;
const int NetDef::kOpFieldNumber;
const int NetDef::kTypeFieldNumber;
const int NetDef::kNumWorkersFieldNumber;
const int NetDef::kDeviceOptionFieldNumber;
const int NetDef::kArgFieldNumber;
const int NetDef::kExternalInputFieldNumber;
const int NetDef::kExternalOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetDef::NetDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.NetDef)
}
NetDef::NetDef(const NetDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      op_(from.op_),
      arg_(from.arg_),
      external_input_(from.external_input_),
      external_output_(from.external_output_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_device_option()) {
    device_option_ = new ::caffe2::DeviceOption(*from.device_option_);
  } else {
    device_option_ = NULL;
  }
  num_workers_ = from.num_workers_;
  // @@protoc_insertion_point(copy_constructor:caffe2.NetDef)
}

void NetDef::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_workers_) -
      reinterpret_cast<char*>(&device_option_)) + sizeof(num_workers_));
}

NetDef::~NetDef() {
  // @@protoc_insertion_point(destructor:caffe2.NetDef)
  SharedDtor();
}

void NetDef::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_option_;
}

void NetDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetDef::descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetDef& NetDef::default_instance() {
  protobuf_caffe2_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetDef* NetDef::New(::google::protobuf::Arena* arena) const {
  NetDef* n = new NetDef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetDef::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.NetDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_.Clear();
  arg_.Clear();
  external_input_.Clear();
  external_output_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(device_option_ != NULL);
      device_option_->::caffe2::DeviceOption::Clear();
    }
  }
  num_workers_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.NetDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.NetDef.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe2.OperatorDef op = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_op()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.NetDef.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_workers = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_num_workers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_workers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe2.DeviceOption device_option = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_option()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe2.Argument arg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string external_input = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_external_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_input(this->external_input_size() - 1).data(),
            static_cast<int>(this->external_input(this->external_input_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.NetDef.external_input");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string external_output = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_external_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_output(this->external_output_size() - 1).data(),
            static_cast<int>(this->external_output(this->external_output_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.NetDef.external_output");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.NetDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.NetDef)
  return false;
#undef DO_
}

void NetDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.NetDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.NetDef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .caffe2.OperatorDef op = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->op_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->op(static_cast<int>(i)), output);
  }

  // optional string type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.NetDef.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // optional int32 num_workers = 4 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_workers(), output);
  }

  // optional .caffe2.DeviceOption device_option = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->device_option_, output);
  }

  // repeated .caffe2.Argument arg = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arg_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arg(static_cast<int>(i)), output);
  }

  // repeated string external_input = 7;
  for (int i = 0, n = this->external_input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_input(i).data(), static_cast<int>(this->external_input(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.NetDef.external_input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->external_input(i), output);
  }

  // repeated string external_output = 8;
  for (int i = 0, n = this->external_output_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_output(i).data(), static_cast<int>(this->external_output(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.NetDef.external_output");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->external_output(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.NetDef)
}

::google::protobuf::uint8* NetDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.NetDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.NetDef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .caffe2.OperatorDef op = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->op_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->op(static_cast<int>(i)), deterministic, target);
  }

  // optional string type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.NetDef.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional int32 num_workers = 4 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_workers(), target);
  }

  // optional .caffe2.DeviceOption device_option = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->device_option_, deterministic, target);
  }

  // repeated .caffe2.Argument arg = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arg_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->arg(static_cast<int>(i)), deterministic, target);
  }

  // repeated string external_input = 7;
  for (int i = 0, n = this->external_input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_input(i).data(), static_cast<int>(this->external_input(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.NetDef.external_input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->external_input(i), target);
  }

  // repeated string external_output = 8;
  for (int i = 0, n = this->external_output_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_output(i).data(), static_cast<int>(this->external_output(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.NetDef.external_output");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->external_output(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.NetDef)
  return target;
}

size_t NetDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.NetDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe2.OperatorDef op = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->op_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->op(static_cast<int>(i)));
    }
  }

  // repeated .caffe2.Argument arg = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->arg_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arg(static_cast<int>(i)));
    }
  }

  // repeated string external_input = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->external_input_size());
  for (int i = 0, n = this->external_input_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->external_input(i));
  }

  // repeated string external_output = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->external_output_size());
  for (int i = 0, n = this->external_output_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->external_output(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .caffe2.DeviceOption device_option = 5;
    if (has_device_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_option_);
    }

    // optional int32 num_workers = 4 [deprecated = true];
    if (has_num_workers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_workers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.NetDef)
  GOOGLE_DCHECK_NE(&from, this);
  const NetDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.NetDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.NetDef)
    MergeFrom(*source);
  }
}

void NetDef::MergeFrom(const NetDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.NetDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  op_.MergeFrom(from.op_);
  arg_.MergeFrom(from.arg_);
  external_input_.MergeFrom(from.external_input_);
  external_output_.MergeFrom(from.external_output_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_device_option()->::caffe2::DeviceOption::MergeFrom(from.device_option());
    }
    if (cached_has_bits & 0x00000008u) {
      num_workers_ = from.num_workers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.NetDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetDef::CopyFrom(const NetDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.NetDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetDef::IsInitialized() const {
  return true;
}

void NetDef::Swap(NetDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetDef::InternalSwap(NetDef* other) {
  using std::swap;
  op_.InternalSwap(&other->op_);
  arg_.InternalSwap(&other->arg_);
  external_input_.InternalSwap(&other->external_input_);
  external_output_.InternalSwap(&other->external_output_);
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  swap(device_option_, other->device_option_);
  swap(num_workers_, other->num_workers_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetDef::GetMetadata() const {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetDef

// optional string name = 1;
bool NetDef::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetDef::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NetDef::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetDef::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& NetDef::name() const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.name)
  return name_.GetNoArena();
}
void NetDef::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.NetDef.name)
}
#if LANG_CXX11
void NetDef::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.NetDef.name)
}
#endif
void NetDef::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.NetDef.name)
}
void NetDef::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.NetDef.name)
}
::std::string* NetDef::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetDef::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.NetDef.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetDef::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.NetDef.name)
}

// repeated .caffe2.OperatorDef op = 2;
int NetDef::op_size() const {
  return op_.size();
}
void NetDef::clear_op() {
  op_.Clear();
}
const ::caffe2::OperatorDef& NetDef::op(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.op)
  return op_.Get(index);
}
::caffe2::OperatorDef* NetDef::mutable_op(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.op)
  return op_.Mutable(index);
}
::caffe2::OperatorDef* NetDef::add_op() {
  // @@protoc_insertion_point(field_add:caffe2.NetDef.op)
  return op_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::OperatorDef >*
NetDef::mutable_op() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.NetDef.op)
  return &op_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::OperatorDef >&
NetDef::op() const {
  // @@protoc_insertion_point(field_list:caffe2.NetDef.op)
  return op_;
}

// optional string type = 3;
bool NetDef::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetDef::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void NetDef::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetDef::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& NetDef::type() const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.type)
  return type_.GetNoArena();
}
void NetDef::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.NetDef.type)
}
#if LANG_CXX11
void NetDef::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.NetDef.type)
}
#endif
void NetDef::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.NetDef.type)
}
void NetDef::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.NetDef.type)
}
::std::string* NetDef::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetDef::release_type() {
  // @@protoc_insertion_point(field_release:caffe2.NetDef.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetDef::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.NetDef.type)
}

// optional int32 num_workers = 4 [deprecated = true];
bool NetDef::has_num_workers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetDef::set_has_num_workers() {
  _has_bits_[0] |= 0x00000008u;
}
void NetDef::clear_has_num_workers() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetDef::clear_num_workers() {
  num_workers_ = 0;
  clear_has_num_workers();
}
::google::protobuf::int32 NetDef::num_workers() const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.num_workers)
  return num_workers_;
}
void NetDef::set_num_workers(::google::protobuf::int32 value) {
  set_has_num_workers();
  num_workers_ = value;
  // @@protoc_insertion_point(field_set:caffe2.NetDef.num_workers)
}

// optional .caffe2.DeviceOption device_option = 5;
bool NetDef::has_device_option() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetDef::set_has_device_option() {
  _has_bits_[0] |= 0x00000004u;
}
void NetDef::clear_has_device_option() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetDef::clear_device_option() {
  if (device_option_ != NULL) device_option_->::caffe2::DeviceOption::Clear();
  clear_has_device_option();
}
const ::caffe2::DeviceOption& NetDef::device_option() const {
  const ::caffe2::DeviceOption* p = device_option_;
  // @@protoc_insertion_point(field_get:caffe2.NetDef.device_option)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe2::DeviceOption*>(
      &::caffe2::_DeviceOption_default_instance_);
}
::caffe2::DeviceOption* NetDef::mutable_device_option() {
  set_has_device_option();
  if (device_option_ == NULL) {
    device_option_ = new ::caffe2::DeviceOption;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.device_option)
  return device_option_;
}
::caffe2::DeviceOption* NetDef::release_device_option() {
  // @@protoc_insertion_point(field_release:caffe2.NetDef.device_option)
  clear_has_device_option();
  ::caffe2::DeviceOption* temp = device_option_;
  device_option_ = NULL;
  return temp;
}
void NetDef::set_allocated_device_option(::caffe2::DeviceOption* device_option) {
  delete device_option_;
  device_option_ = device_option;
  if (device_option) {
    set_has_device_option();
  } else {
    clear_has_device_option();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.NetDef.device_option)
}

// repeated .caffe2.Argument arg = 6;
int NetDef::arg_size() const {
  return arg_.size();
}
void NetDef::clear_arg() {
  arg_.Clear();
}
const ::caffe2::Argument& NetDef::arg(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.arg)
  return arg_.Get(index);
}
::caffe2::Argument* NetDef::mutable_arg(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.arg)
  return arg_.Mutable(index);
}
::caffe2::Argument* NetDef::add_arg() {
  // @@protoc_insertion_point(field_add:caffe2.NetDef.arg)
  return arg_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::Argument >*
NetDef::mutable_arg() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.NetDef.arg)
  return &arg_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >&
NetDef::arg() const {
  // @@protoc_insertion_point(field_list:caffe2.NetDef.arg)
  return arg_;
}

// repeated string external_input = 7;
int NetDef::external_input_size() const {
  return external_input_.size();
}
void NetDef::clear_external_input() {
  external_input_.Clear();
}
const ::std::string& NetDef::external_input(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.external_input)
  return external_input_.Get(index);
}
::std::string* NetDef::mutable_external_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.external_input)
  return external_input_.Mutable(index);
}
void NetDef::set_external_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.NetDef.external_input)
  external_input_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetDef::set_external_input(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe2.NetDef.external_input)
  external_input_.Mutable(index)->assign(std::move(value));
}
#endif
void NetDef::set_external_input(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  external_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.NetDef.external_input)
}
void NetDef::set_external_input(int index, const char* value, size_t size) {
  external_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.NetDef.external_input)
}
::std::string* NetDef::add_external_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.NetDef.external_input)
  return external_input_.Add();
}
void NetDef::add_external_input(const ::std::string& value) {
  external_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.NetDef.external_input)
}
#if LANG_CXX11
void NetDef::add_external_input(::std::string&& value) {
  external_input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe2.NetDef.external_input)
}
#endif
void NetDef::add_external_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  external_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.NetDef.external_input)
}
void NetDef::add_external_input(const char* value, size_t size) {
  external_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.NetDef.external_input)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetDef::external_input() const {
  // @@protoc_insertion_point(field_list:caffe2.NetDef.external_input)
  return external_input_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetDef::mutable_external_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.NetDef.external_input)
  return &external_input_;
}

// repeated string external_output = 8;
int NetDef::external_output_size() const {
  return external_output_.size();
}
void NetDef::clear_external_output() {
  external_output_.Clear();
}
const ::std::string& NetDef::external_output(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.external_output)
  return external_output_.Get(index);
}
::std::string* NetDef::mutable_external_output(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.external_output)
  return external_output_.Mutable(index);
}
void NetDef::set_external_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.NetDef.external_output)
  external_output_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetDef::set_external_output(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe2.NetDef.external_output)
  external_output_.Mutable(index)->assign(std::move(value));
}
#endif
void NetDef::set_external_output(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  external_output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.NetDef.external_output)
}
void NetDef::set_external_output(int index, const char* value, size_t size) {
  external_output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.NetDef.external_output)
}
::std::string* NetDef::add_external_output() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.NetDef.external_output)
  return external_output_.Add();
}
void NetDef::add_external_output(const ::std::string& value) {
  external_output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.NetDef.external_output)
}
#if LANG_CXX11
void NetDef::add_external_output(::std::string&& value) {
  external_output_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe2.NetDef.external_output)
}
#endif
void NetDef::add_external_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  external_output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.NetDef.external_output)
}
void NetDef::add_external_output(const char* value, size_t size) {
  external_output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.NetDef.external_output)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetDef::external_output() const {
  // @@protoc_insertion_point(field_list:caffe2.NetDef.external_output)
  return external_output_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetDef::mutable_external_output() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.NetDef.external_output)
  return &external_output_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionStep::kNameFieldNumber;
const int ExecutionStep::kSubstepFieldNumber;
const int ExecutionStep::kNetworkFieldNumber;
const int ExecutionStep::kNumIterFieldNumber;
const int ExecutionStep::kCriteriaNetworkFieldNumber;
const int ExecutionStep::kReportNetFieldNumber;
const int ExecutionStep::kReportIntervalFieldNumber;
const int ExecutionStep::kRunEveryMsFieldNumber;
const int ExecutionStep::kConcurrentSubstepsFieldNumber;
const int ExecutionStep::kShouldStopBlobFieldNumber;
const int ExecutionStep::kOnlyOnceFieldNumber;
const int ExecutionStep::kCreateWorkspaceFieldNumber;
const int ExecutionStep::kNumConcurrentInstancesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionStep::ExecutionStep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.ExecutionStep)
}
ExecutionStep::ExecutionStep(const ExecutionStep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      substep_(from.substep_),
      network_(from.network_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  criteria_network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_criteria_network()) {
    criteria_network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.criteria_network_);
  }
  report_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_report_net()) {
    report_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_net_);
  }
  should_stop_blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_should_stop_blob()) {
    should_stop_blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.should_stop_blob_);
  }
  ::memcpy(&num_iter_, &from.num_iter_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_concurrent_instances_) -
    reinterpret_cast<char*>(&num_iter_)) + sizeof(num_concurrent_instances_));
  // @@protoc_insertion_point(copy_constructor:caffe2.ExecutionStep)
}

void ExecutionStep::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  criteria_network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  report_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  should_stop_blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_iter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_concurrent_instances_) -
      reinterpret_cast<char*>(&num_iter_)) + sizeof(num_concurrent_instances_));
}

ExecutionStep::~ExecutionStep() {
  // @@protoc_insertion_point(destructor:caffe2.ExecutionStep)
  SharedDtor();
}

void ExecutionStep::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  criteria_network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  report_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  should_stop_blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExecutionStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionStep::descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecutionStep& ExecutionStep::default_instance() {
  protobuf_caffe2_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExecutionStep* ExecutionStep::New(::google::protobuf::Arena* arena) const {
  ExecutionStep* n = new ExecutionStep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecutionStep::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.ExecutionStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  substep_.Clear();
  network_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!criteria_network_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*criteria_network_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!report_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*report_net_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!should_stop_blob_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*should_stop_blob_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&num_iter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&only_once_) -
        reinterpret_cast<char*>(&num_iter_)) + sizeof(only_once_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&create_workspace_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_concurrent_instances_) -
        reinterpret_cast<char*>(&create_workspace_)) + sizeof(num_concurrent_instances_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExecutionStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.ExecutionStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ExecutionStep.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe2.ExecutionStep substep = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_substep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string network = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->network(this->network_size() - 1).data(),
            static_cast<int>(this->network(this->network_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ExecutionStep.network");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 num_iter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_num_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string criteria_network = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_criteria_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->criteria_network().data(), static_cast<int>(this->criteria_network().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ExecutionStep.criteria_network");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool concurrent_substeps = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_concurrent_substeps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &concurrent_substeps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string report_net = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_report_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->report_net().data(), static_cast<int>(this->report_net().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ExecutionStep.report_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 report_interval = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_report_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &report_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string should_stop_blob = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_should_stop_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->should_stop_blob().data(), static_cast<int>(this->should_stop_blob().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ExecutionStep.should_stop_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_once = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_only_once();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_once_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 run_every_ms = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_run_every_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &run_every_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool create_workspace = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_create_workspace();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_workspace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_concurrent_instances = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_num_concurrent_instances();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_concurrent_instances_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.ExecutionStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.ExecutionStep)
  return false;
#undef DO_
}

void ExecutionStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.ExecutionStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ExecutionStep.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .caffe2.ExecutionStep substep = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->substep_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->substep(static_cast<int>(i)), output);
  }

  // repeated string network = 3;
  for (int i = 0, n = this->network_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network(i).data(), static_cast<int>(this->network(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ExecutionStep.network");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->network(i), output);
  }

  // optional int64 num_iter = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->num_iter(), output);
  }

  // optional string criteria_network = 5 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->criteria_network().data(), static_cast<int>(this->criteria_network().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ExecutionStep.criteria_network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->criteria_network(), output);
  }

  // optional bool concurrent_substeps = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->concurrent_substeps(), output);
  }

  // optional string report_net = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->report_net().data(), static_cast<int>(this->report_net().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ExecutionStep.report_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->report_net(), output);
  }

  // optional int32 report_interval = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->report_interval(), output);
  }

  // optional string should_stop_blob = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->should_stop_blob().data(), static_cast<int>(this->should_stop_blob().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ExecutionStep.should_stop_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->should_stop_blob(), output);
  }

  // optional bool only_once = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->only_once(), output);
  }

  // optional int64 run_every_ms = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->run_every_ms(), output);
  }

  // optional bool create_workspace = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->create_workspace(), output);
  }

  // optional int32 num_concurrent_instances = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->num_concurrent_instances(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.ExecutionStep)
}

::google::protobuf::uint8* ExecutionStep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.ExecutionStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ExecutionStep.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .caffe2.ExecutionStep substep = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->substep_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->substep(static_cast<int>(i)), deterministic, target);
  }

  // repeated string network = 3;
  for (int i = 0, n = this->network_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network(i).data(), static_cast<int>(this->network(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ExecutionStep.network");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->network(i), target);
  }

  // optional int64 num_iter = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->num_iter(), target);
  }

  // optional string criteria_network = 5 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->criteria_network().data(), static_cast<int>(this->criteria_network().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ExecutionStep.criteria_network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->criteria_network(), target);
  }

  // optional bool concurrent_substeps = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->concurrent_substeps(), target);
  }

  // optional string report_net = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->report_net().data(), static_cast<int>(this->report_net().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ExecutionStep.report_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->report_net(), target);
  }

  // optional int32 report_interval = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->report_interval(), target);
  }

  // optional string should_stop_blob = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->should_stop_blob().data(), static_cast<int>(this->should_stop_blob().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ExecutionStep.should_stop_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->should_stop_blob(), target);
  }

  // optional bool only_once = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->only_once(), target);
  }

  // optional int64 run_every_ms = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->run_every_ms(), target);
  }

  // optional bool create_workspace = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->create_workspace(), target);
  }

  // optional int32 num_concurrent_instances = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->num_concurrent_instances(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.ExecutionStep)
  return target;
}

size_t ExecutionStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.ExecutionStep)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe2.ExecutionStep substep = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->substep_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->substep(static_cast<int>(i)));
    }
  }

  // repeated string network = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->network_size());
  for (int i = 0, n = this->network_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->network(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string criteria_network = 5 [deprecated = true];
    if (has_criteria_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->criteria_network());
    }

    // optional string report_net = 7;
    if (has_report_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->report_net());
    }

    // optional string should_stop_blob = 9;
    if (has_should_stop_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->should_stop_blob());
    }

    // optional int64 num_iter = 4;
    if (has_num_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_iter());
    }

    // optional int32 report_interval = 8;
    if (has_report_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->report_interval());
    }

    // optional bool concurrent_substeps = 6;
    if (has_concurrent_substeps()) {
      total_size += 1 + 1;
    }

    // optional bool only_once = 10;
    if (has_only_once()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool create_workspace = 12;
    if (has_create_workspace()) {
      total_size += 1 + 1;
    }

    // optional int64 run_every_ms = 11;
    if (has_run_every_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->run_every_ms());
    }

    // optional int32 num_concurrent_instances = 13;
    if (has_num_concurrent_instances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_concurrent_instances());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionStep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.ExecutionStep)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionStep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecutionStep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.ExecutionStep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.ExecutionStep)
    MergeFrom(*source);
  }
}

void ExecutionStep::MergeFrom(const ExecutionStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.ExecutionStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  substep_.MergeFrom(from.substep_);
  network_.MergeFrom(from.network_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_criteria_network();
      criteria_network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.criteria_network_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_report_net();
      report_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_net_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_should_stop_blob();
      should_stop_blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.should_stop_blob_);
    }
    if (cached_has_bits & 0x00000010u) {
      num_iter_ = from.num_iter_;
    }
    if (cached_has_bits & 0x00000020u) {
      report_interval_ = from.report_interval_;
    }
    if (cached_has_bits & 0x00000040u) {
      concurrent_substeps_ = from.concurrent_substeps_;
    }
    if (cached_has_bits & 0x00000080u) {
      only_once_ = from.only_once_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      create_workspace_ = from.create_workspace_;
    }
    if (cached_has_bits & 0x00000200u) {
      run_every_ms_ = from.run_every_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      num_concurrent_instances_ = from.num_concurrent_instances_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExecutionStep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.ExecutionStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionStep::CopyFrom(const ExecutionStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.ExecutionStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionStep::IsInitialized() const {
  return true;
}

void ExecutionStep::Swap(ExecutionStep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionStep::InternalSwap(ExecutionStep* other) {
  using std::swap;
  substep_.InternalSwap(&other->substep_);
  network_.InternalSwap(&other->network_);
  name_.Swap(&other->name_);
  criteria_network_.Swap(&other->criteria_network_);
  report_net_.Swap(&other->report_net_);
  should_stop_blob_.Swap(&other->should_stop_blob_);
  swap(num_iter_, other->num_iter_);
  swap(report_interval_, other->report_interval_);
  swap(concurrent_substeps_, other->concurrent_substeps_);
  swap(only_once_, other->only_once_);
  swap(create_workspace_, other->create_workspace_);
  swap(run_every_ms_, other->run_every_ms_);
  swap(num_concurrent_instances_, other->num_concurrent_instances_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecutionStep::GetMetadata() const {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecutionStep

// optional string name = 1;
bool ExecutionStep::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExecutionStep::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ExecutionStep::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExecutionStep::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ExecutionStep::name() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.name)
  return name_.GetNoArena();
}
void ExecutionStep::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.name)
}
#if LANG_CXX11
void ExecutionStep::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.ExecutionStep.name)
}
#endif
void ExecutionStep::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ExecutionStep.name)
}
void ExecutionStep::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ExecutionStep.name)
}
::std::string* ExecutionStep::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.ExecutionStep.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExecutionStep::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.ExecutionStep.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExecutionStep::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ExecutionStep.name)
}

// repeated .caffe2.ExecutionStep substep = 2;
int ExecutionStep::substep_size() const {
  return substep_.size();
}
void ExecutionStep::clear_substep() {
  substep_.Clear();
}
const ::caffe2::ExecutionStep& ExecutionStep::substep(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.substep)
  return substep_.Get(index);
}
::caffe2::ExecutionStep* ExecutionStep::mutable_substep(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ExecutionStep.substep)
  return substep_.Mutable(index);
}
::caffe2::ExecutionStep* ExecutionStep::add_substep() {
  // @@protoc_insertion_point(field_add:caffe2.ExecutionStep.substep)
  return substep_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >*
ExecutionStep::mutable_substep() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ExecutionStep.substep)
  return &substep_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >&
ExecutionStep::substep() const {
  // @@protoc_insertion_point(field_list:caffe2.ExecutionStep.substep)
  return substep_;
}

// repeated string network = 3;
int ExecutionStep::network_size() const {
  return network_.size();
}
void ExecutionStep::clear_network() {
  network_.Clear();
}
const ::std::string& ExecutionStep::network(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.network)
  return network_.Get(index);
}
::std::string* ExecutionStep::mutable_network(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ExecutionStep.network)
  return network_.Mutable(index);
}
void ExecutionStep::set_network(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.network)
  network_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ExecutionStep::set_network(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.network)
  network_.Mutable(index)->assign(std::move(value));
}
#endif
void ExecutionStep::set_network(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  network_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.ExecutionStep.network)
}
void ExecutionStep::set_network(int index, const char* value, size_t size) {
  network_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.ExecutionStep.network)
}
::std::string* ExecutionStep::add_network() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.ExecutionStep.network)
  return network_.Add();
}
void ExecutionStep::add_network(const ::std::string& value) {
  network_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.ExecutionStep.network)
}
#if LANG_CXX11
void ExecutionStep::add_network(::std::string&& value) {
  network_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe2.ExecutionStep.network)
}
#endif
void ExecutionStep::add_network(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  network_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.ExecutionStep.network)
}
void ExecutionStep::add_network(const char* value, size_t size) {
  network_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.ExecutionStep.network)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExecutionStep::network() const {
  // @@protoc_insertion_point(field_list:caffe2.ExecutionStep.network)
  return network_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ExecutionStep::mutable_network() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ExecutionStep.network)
  return &network_;
}

// optional int64 num_iter = 4;
bool ExecutionStep::has_num_iter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ExecutionStep::set_has_num_iter() {
  _has_bits_[0] |= 0x00000010u;
}
void ExecutionStep::clear_has_num_iter() {
  _has_bits_[0] &= ~0x00000010u;
}
void ExecutionStep::clear_num_iter() {
  num_iter_ = GOOGLE_LONGLONG(0);
  clear_has_num_iter();
}
::google::protobuf::int64 ExecutionStep::num_iter() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.num_iter)
  return num_iter_;
}
void ExecutionStep::set_num_iter(::google::protobuf::int64 value) {
  set_has_num_iter();
  num_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.num_iter)
}

// optional string criteria_network = 5 [deprecated = true];
bool ExecutionStep::has_criteria_network() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExecutionStep::set_has_criteria_network() {
  _has_bits_[0] |= 0x00000002u;
}
void ExecutionStep::clear_has_criteria_network() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExecutionStep::clear_criteria_network() {
  criteria_network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_criteria_network();
}
const ::std::string& ExecutionStep::criteria_network() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.criteria_network)
  return criteria_network_.GetNoArena();
}
void ExecutionStep::set_criteria_network(const ::std::string& value) {
  set_has_criteria_network();
  criteria_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.criteria_network)
}
#if LANG_CXX11
void ExecutionStep::set_criteria_network(::std::string&& value) {
  set_has_criteria_network();
  criteria_network_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.ExecutionStep.criteria_network)
}
#endif
void ExecutionStep::set_criteria_network(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_criteria_network();
  criteria_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ExecutionStep.criteria_network)
}
void ExecutionStep::set_criteria_network(const char* value, size_t size) {
  set_has_criteria_network();
  criteria_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ExecutionStep.criteria_network)
}
::std::string* ExecutionStep::mutable_criteria_network() {
  set_has_criteria_network();
  // @@protoc_insertion_point(field_mutable:caffe2.ExecutionStep.criteria_network)
  return criteria_network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExecutionStep::release_criteria_network() {
  // @@protoc_insertion_point(field_release:caffe2.ExecutionStep.criteria_network)
  clear_has_criteria_network();
  return criteria_network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExecutionStep::set_allocated_criteria_network(::std::string* criteria_network) {
  if (criteria_network != NULL) {
    set_has_criteria_network();
  } else {
    clear_has_criteria_network();
  }
  criteria_network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), criteria_network);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ExecutionStep.criteria_network)
}

// optional string report_net = 7;
bool ExecutionStep::has_report_net() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ExecutionStep::set_has_report_net() {
  _has_bits_[0] |= 0x00000004u;
}
void ExecutionStep::clear_has_report_net() {
  _has_bits_[0] &= ~0x00000004u;
}
void ExecutionStep::clear_report_net() {
  report_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_report_net();
}
const ::std::string& ExecutionStep::report_net() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.report_net)
  return report_net_.GetNoArena();
}
void ExecutionStep::set_report_net(const ::std::string& value) {
  set_has_report_net();
  report_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.report_net)
}
#if LANG_CXX11
void ExecutionStep::set_report_net(::std::string&& value) {
  set_has_report_net();
  report_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.ExecutionStep.report_net)
}
#endif
void ExecutionStep::set_report_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_report_net();
  report_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ExecutionStep.report_net)
}
void ExecutionStep::set_report_net(const char* value, size_t size) {
  set_has_report_net();
  report_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ExecutionStep.report_net)
}
::std::string* ExecutionStep::mutable_report_net() {
  set_has_report_net();
  // @@protoc_insertion_point(field_mutable:caffe2.ExecutionStep.report_net)
  return report_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExecutionStep::release_report_net() {
  // @@protoc_insertion_point(field_release:caffe2.ExecutionStep.report_net)
  clear_has_report_net();
  return report_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExecutionStep::set_allocated_report_net(::std::string* report_net) {
  if (report_net != NULL) {
    set_has_report_net();
  } else {
    clear_has_report_net();
  }
  report_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), report_net);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ExecutionStep.report_net)
}

// optional int32 report_interval = 8;
bool ExecutionStep::has_report_interval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ExecutionStep::set_has_report_interval() {
  _has_bits_[0] |= 0x00000020u;
}
void ExecutionStep::clear_has_report_interval() {
  _has_bits_[0] &= ~0x00000020u;
}
void ExecutionStep::clear_report_interval() {
  report_interval_ = 0;
  clear_has_report_interval();
}
::google::protobuf::int32 ExecutionStep::report_interval() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.report_interval)
  return report_interval_;
}
void ExecutionStep::set_report_interval(::google::protobuf::int32 value) {
  set_has_report_interval();
  report_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.report_interval)
}

// optional int64 run_every_ms = 11;
bool ExecutionStep::has_run_every_ms() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ExecutionStep::set_has_run_every_ms() {
  _has_bits_[0] |= 0x00000200u;
}
void ExecutionStep::clear_has_run_every_ms() {
  _has_bits_[0] &= ~0x00000200u;
}
void ExecutionStep::clear_run_every_ms() {
  run_every_ms_ = GOOGLE_LONGLONG(0);
  clear_has_run_every_ms();
}
::google::protobuf::int64 ExecutionStep::run_every_ms() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.run_every_ms)
  return run_every_ms_;
}
void ExecutionStep::set_run_every_ms(::google::protobuf::int64 value) {
  set_has_run_every_ms();
  run_every_ms_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.run_every_ms)
}

// optional bool concurrent_substeps = 6;
bool ExecutionStep::has_concurrent_substeps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ExecutionStep::set_has_concurrent_substeps() {
  _has_bits_[0] |= 0x00000040u;
}
void ExecutionStep::clear_has_concurrent_substeps() {
  _has_bits_[0] &= ~0x00000040u;
}
void ExecutionStep::clear_concurrent_substeps() {
  concurrent_substeps_ = false;
  clear_has_concurrent_substeps();
}
bool ExecutionStep::concurrent_substeps() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.concurrent_substeps)
  return concurrent_substeps_;
}
void ExecutionStep::set_concurrent_substeps(bool value) {
  set_has_concurrent_substeps();
  concurrent_substeps_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.concurrent_substeps)
}

// optional string should_stop_blob = 9;
bool ExecutionStep::has_should_stop_blob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ExecutionStep::set_has_should_stop_blob() {
  _has_bits_[0] |= 0x00000008u;
}
void ExecutionStep::clear_has_should_stop_blob() {
  _has_bits_[0] &= ~0x00000008u;
}
void ExecutionStep::clear_should_stop_blob() {
  should_stop_blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_should_stop_blob();
}
const ::std::string& ExecutionStep::should_stop_blob() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.should_stop_blob)
  return should_stop_blob_.GetNoArena();
}
void ExecutionStep::set_should_stop_blob(const ::std::string& value) {
  set_has_should_stop_blob();
  should_stop_blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.should_stop_blob)
}
#if LANG_CXX11
void ExecutionStep::set_should_stop_blob(::std::string&& value) {
  set_has_should_stop_blob();
  should_stop_blob_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.ExecutionStep.should_stop_blob)
}
#endif
void ExecutionStep::set_should_stop_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_should_stop_blob();
  should_stop_blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ExecutionStep.should_stop_blob)
}
void ExecutionStep::set_should_stop_blob(const char* value, size_t size) {
  set_has_should_stop_blob();
  should_stop_blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ExecutionStep.should_stop_blob)
}
::std::string* ExecutionStep::mutable_should_stop_blob() {
  set_has_should_stop_blob();
  // @@protoc_insertion_point(field_mutable:caffe2.ExecutionStep.should_stop_blob)
  return should_stop_blob_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExecutionStep::release_should_stop_blob() {
  // @@protoc_insertion_point(field_release:caffe2.ExecutionStep.should_stop_blob)
  clear_has_should_stop_blob();
  return should_stop_blob_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExecutionStep::set_allocated_should_stop_blob(::std::string* should_stop_blob) {
  if (should_stop_blob != NULL) {
    set_has_should_stop_blob();
  } else {
    clear_has_should_stop_blob();
  }
  should_stop_blob_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), should_stop_blob);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ExecutionStep.should_stop_blob)
}

// optional bool only_once = 10;
bool ExecutionStep::has_only_once() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ExecutionStep::set_has_only_once() {
  _has_bits_[0] |= 0x00000080u;
}
void ExecutionStep::clear_has_only_once() {
  _has_bits_[0] &= ~0x00000080u;
}
void ExecutionStep::clear_only_once() {
  only_once_ = false;
  clear_has_only_once();
}
bool ExecutionStep::only_once() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.only_once)
  return only_once_;
}
void ExecutionStep::set_only_once(bool value) {
  set_has_only_once();
  only_once_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.only_once)
}

// optional bool create_workspace = 12;
bool ExecutionStep::has_create_workspace() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ExecutionStep::set_has_create_workspace() {
  _has_bits_[0] |= 0x00000100u;
}
void ExecutionStep::clear_has_create_workspace() {
  _has_bits_[0] &= ~0x00000100u;
}
void ExecutionStep::clear_create_workspace() {
  create_workspace_ = false;
  clear_has_create_workspace();
}
bool ExecutionStep::create_workspace() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.create_workspace)
  return create_workspace_;
}
void ExecutionStep::set_create_workspace(bool value) {
  set_has_create_workspace();
  create_workspace_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.create_workspace)
}

// optional int32 num_concurrent_instances = 13;
bool ExecutionStep::has_num_concurrent_instances() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ExecutionStep::set_has_num_concurrent_instances() {
  _has_bits_[0] |= 0x00000400u;
}
void ExecutionStep::clear_has_num_concurrent_instances() {
  _has_bits_[0] &= ~0x00000400u;
}
void ExecutionStep::clear_num_concurrent_instances() {
  num_concurrent_instances_ = 0;
  clear_has_num_concurrent_instances();
}
::google::protobuf::int32 ExecutionStep::num_concurrent_instances() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.num_concurrent_instances)
  return num_concurrent_instances_;
}
void ExecutionStep::set_num_concurrent_instances(::google::protobuf::int32 value) {
  set_has_num_concurrent_instances();
  num_concurrent_instances_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.num_concurrent_instances)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanDef::kNameFieldNumber;
const int PlanDef::kNetworkFieldNumber;
const int PlanDef::kExecutionStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanDef::PlanDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.PlanDef)
}
PlanDef::PlanDef(const PlanDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      network_(from.network_),
      execution_step_(from.execution_step_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe2.PlanDef)
}

void PlanDef::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PlanDef::~PlanDef() {
  // @@protoc_insertion_point(destructor:caffe2.PlanDef)
  SharedDtor();
}

void PlanDef::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlanDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanDef::descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanDef& PlanDef::default_instance() {
  protobuf_caffe2_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlanDef* PlanDef::New(::google::protobuf::Arena* arena) const {
  PlanDef* n = new PlanDef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanDef::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.PlanDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  network_.Clear();
  execution_step_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.PlanDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PlanDef.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe2.NetDef network = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_network()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe2.ExecutionStep execution_step = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_execution_step()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.PlanDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.PlanDef)
  return false;
#undef DO_
}

void PlanDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.PlanDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PlanDef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .caffe2.NetDef network = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->network_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->network(static_cast<int>(i)), output);
  }

  // repeated .caffe2.ExecutionStep execution_step = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->execution_step_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->execution_step(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.PlanDef)
}

::google::protobuf::uint8* PlanDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.PlanDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PlanDef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .caffe2.NetDef network = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->network_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->network(static_cast<int>(i)), deterministic, target);
  }

  // repeated .caffe2.ExecutionStep execution_step = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->execution_step_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->execution_step(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.PlanDef)
  return target;
}

size_t PlanDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.PlanDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe2.NetDef network = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->network_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network(static_cast<int>(i)));
    }
  }

  // repeated .caffe2.ExecutionStep execution_step = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->execution_step_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->execution_step(static_cast<int>(i)));
    }
  }

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.PlanDef)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.PlanDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.PlanDef)
    MergeFrom(*source);
  }
}

void PlanDef::MergeFrom(const PlanDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.PlanDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  network_.MergeFrom(from.network_);
  execution_step_.MergeFrom(from.execution_step_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void PlanDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.PlanDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanDef::CopyFrom(const PlanDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.PlanDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanDef::IsInitialized() const {
  return true;
}

void PlanDef::Swap(PlanDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanDef::InternalSwap(PlanDef* other) {
  using std::swap;
  network_.InternalSwap(&other->network_);
  execution_step_.InternalSwap(&other->execution_step_);
  name_.Swap(&other->name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanDef::GetMetadata() const {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanDef

// optional string name = 1;
bool PlanDef::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlanDef::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PlanDef::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlanDef::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PlanDef::name() const {
  // @@protoc_insertion_point(field_get:caffe2.PlanDef.name)
  return name_.GetNoArena();
}
void PlanDef::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.PlanDef.name)
}
#if LANG_CXX11
void PlanDef::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PlanDef.name)
}
#endif
void PlanDef::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PlanDef.name)
}
void PlanDef::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PlanDef.name)
}
::std::string* PlanDef::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.PlanDef.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlanDef::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.PlanDef.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlanDef::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PlanDef.name)
}

// repeated .caffe2.NetDef network = 2;
int PlanDef::network_size() const {
  return network_.size();
}
void PlanDef::clear_network() {
  network_.Clear();
}
const ::caffe2::NetDef& PlanDef::network(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.PlanDef.network)
  return network_.Get(index);
}
::caffe2::NetDef* PlanDef::mutable_network(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.PlanDef.network)
  return network_.Mutable(index);
}
::caffe2::NetDef* PlanDef::add_network() {
  // @@protoc_insertion_point(field_add:caffe2.PlanDef.network)
  return network_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::NetDef >*
PlanDef::mutable_network() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.PlanDef.network)
  return &network_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::NetDef >&
PlanDef::network() const {
  // @@protoc_insertion_point(field_list:caffe2.PlanDef.network)
  return network_;
}

// repeated .caffe2.ExecutionStep execution_step = 3;
int PlanDef::execution_step_size() const {
  return execution_step_.size();
}
void PlanDef::clear_execution_step() {
  execution_step_.Clear();
}
const ::caffe2::ExecutionStep& PlanDef::execution_step(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.PlanDef.execution_step)
  return execution_step_.Get(index);
}
::caffe2::ExecutionStep* PlanDef::mutable_execution_step(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.PlanDef.execution_step)
  return execution_step_.Mutable(index);
}
::caffe2::ExecutionStep* PlanDef::add_execution_step() {
  // @@protoc_insertion_point(field_add:caffe2.PlanDef.execution_step)
  return execution_step_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >*
PlanDef::mutable_execution_step() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.PlanDef.execution_step)
  return &execution_step_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >&
PlanDef::execution_step() const {
  // @@protoc_insertion_point(field_list:caffe2.PlanDef.execution_step)
  return execution_step_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobProto::kNameFieldNumber;
const int BlobProto::kTypeFieldNumber;
const int BlobProto::kTensorFieldNumber;
const int BlobProto::kContentFieldNumber;
const int BlobProto::kQtensorFieldNumber;
const int BlobProto::kContentNumChunksFieldNumber;
const int BlobProto::kContentChunkIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobProto::BlobProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.BlobProto)
}
BlobProto::BlobProto(const BlobProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_tensor()) {
    tensor_ = new ::caffe2::TensorProto(*from.tensor_);
  } else {
    tensor_ = NULL;
  }
  if (from.has_qtensor()) {
    qtensor_ = new ::caffe2::QTensorProto(*from.qtensor_);
  } else {
    qtensor_ = NULL;
  }
  ::memcpy(&content_num_chunks_, &from.content_num_chunks_,
    static_cast<size_t>(reinterpret_cast<char*>(&content_chunk_id_) -
    reinterpret_cast<char*>(&content_num_chunks_)) + sizeof(content_chunk_id_));
  // @@protoc_insertion_point(copy_constructor:caffe2.BlobProto)
}

void BlobProto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&content_chunk_id_) -
      reinterpret_cast<char*>(&tensor_)) + sizeof(content_chunk_id_));
}

BlobProto::~BlobProto() {
  // @@protoc_insertion_point(destructor:caffe2.BlobProto)
  SharedDtor();
}

void BlobProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tensor_;
  if (this != internal_default_instance()) delete qtensor_;
}

void BlobProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProto::descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlobProto& BlobProto::default_instance() {
  protobuf_caffe2_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlobProto* BlobProto::New(::google::protobuf::Arena* arena) const {
  BlobProto* n = new BlobProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.BlobProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tensor_ != NULL);
      tensor_->::caffe2::TensorProto::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(qtensor_ != NULL);
      qtensor_->::caffe2::QTensorProto::Clear();
    }
  }
  if (cached_has_bits & 96u) {
    ::memset(&content_num_chunks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&content_chunk_id_) -
        reinterpret_cast<char*>(&content_num_chunks_)) + sizeof(content_chunk_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlobProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.BlobProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.BlobProto.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.BlobProto.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe2.TensorProto tensor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe2.QTensorProto qtensor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qtensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 content_num_chunks = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_content_num_chunks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_num_chunks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 content_chunk_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_content_chunk_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_chunk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.BlobProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.BlobProto)
  return false;
#undef DO_
}

void BlobProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.BlobProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.BlobProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.BlobProto.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional .caffe2.TensorProto tensor = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tensor_, output);
  }

  // optional bytes content = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  // optional .caffe2.QTensorProto qtensor = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->qtensor_, output);
  }

  // optional int32 content_num_chunks = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->content_num_chunks(), output);
  }

  // optional int32 content_chunk_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->content_chunk_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.BlobProto)
}

::google::protobuf::uint8* BlobProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.BlobProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.BlobProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.BlobProto.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional .caffe2.TensorProto tensor = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->tensor_, deterministic, target);
  }

  // optional bytes content = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // optional .caffe2.QTensorProto qtensor = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->qtensor_, deterministic, target);
  }

  // optional int32 content_num_chunks = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->content_num_chunks(), target);
  }

  // optional int32 content_chunk_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->content_chunk_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.BlobProto)
  return target;
}

size_t BlobProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.BlobProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional .caffe2.TensorProto tensor = 3;
    if (has_tensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tensor_);
    }

    // optional .caffe2.QTensorProto qtensor = 5;
    if (has_qtensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->qtensor_);
    }

    // optional int32 content_num_chunks = 6;
    if (has_content_num_chunks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->content_num_chunks());
    }

    // optional int32 content_chunk_id = 7;
    if (has_content_chunk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->content_chunk_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.BlobProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.BlobProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.BlobProto)
    MergeFrom(*source);
  }
}

void BlobProto::MergeFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.BlobProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_tensor()->::caffe2::TensorProto::MergeFrom(from.tensor());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_qtensor()->::caffe2::QTensorProto::MergeFrom(from.qtensor());
    }
    if (cached_has_bits & 0x00000020u) {
      content_num_chunks_ = from.content_num_chunks_;
    }
    if (cached_has_bits & 0x00000040u) {
      content_chunk_id_ = from.content_chunk_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlobProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProto::CopyFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProto::IsInitialized() const {
  if (has_tensor()) {
    if (!this->tensor_->IsInitialized()) return false;
  }
  if (has_qtensor()) {
    if (!this->qtensor_->IsInitialized()) return false;
  }
  return true;
}

void BlobProto::Swap(BlobProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobProto::InternalSwap(BlobProto* other) {
  using std::swap;
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  content_.Swap(&other->content_);
  swap(tensor_, other->tensor_);
  swap(qtensor_, other->qtensor_);
  swap(content_num_chunks_, other->content_num_chunks_);
  swap(content_chunk_id_, other->content_chunk_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobProto::GetMetadata() const {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobProto

// optional string name = 1;
bool BlobProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlobProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void BlobProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlobProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& BlobProto::name() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobProto.name)
  return name_.GetNoArena();
}
void BlobProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.BlobProto.name)
}
#if LANG_CXX11
void BlobProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.BlobProto.name)
}
#endif
void BlobProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.BlobProto.name)
}
void BlobProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.BlobProto.name)
}
::std::string* BlobProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlobProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlobProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProto.name)
}

// optional string type = 2;
bool BlobProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlobProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void BlobProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlobProto::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& BlobProto::type() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobProto.type)
  return type_.GetNoArena();
}
void BlobProto::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.BlobProto.type)
}
#if LANG_CXX11
void BlobProto::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.BlobProto.type)
}
#endif
void BlobProto::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.BlobProto.type)
}
void BlobProto::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.BlobProto.type)
}
::std::string* BlobProto::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProto.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlobProto::release_type() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProto.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlobProto::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProto.type)
}

// optional .caffe2.TensorProto tensor = 3;
bool BlobProto::has_tensor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BlobProto::set_has_tensor() {
  _has_bits_[0] |= 0x00000008u;
}
void BlobProto::clear_has_tensor() {
  _has_bits_[0] &= ~0x00000008u;
}
void BlobProto::clear_tensor() {
  if (tensor_ != NULL) tensor_->::caffe2::TensorProto::Clear();
  clear_has_tensor();
}
const ::caffe2::TensorProto& BlobProto::tensor() const {
  const ::caffe2::TensorProto* p = tensor_;
  // @@protoc_insertion_point(field_get:caffe2.BlobProto.tensor)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe2::TensorProto*>(
      &::caffe2::_TensorProto_default_instance_);
}
::caffe2::TensorProto* BlobProto::mutable_tensor() {
  set_has_tensor();
  if (tensor_ == NULL) {
    tensor_ = new ::caffe2::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProto.tensor)
  return tensor_;
}
::caffe2::TensorProto* BlobProto::release_tensor() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProto.tensor)
  clear_has_tensor();
  ::caffe2::TensorProto* temp = tensor_;
  tensor_ = NULL;
  return temp;
}
void BlobProto::set_allocated_tensor(::caffe2::TensorProto* tensor) {
  delete tensor_;
  tensor_ = tensor;
  if (tensor) {
    set_has_tensor();
  } else {
    clear_has_tensor();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProto.tensor)
}

// optional bytes content = 4;
bool BlobProto::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlobProto::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
void BlobProto::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlobProto::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& BlobProto::content() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobProto.content)
  return content_.GetNoArena();
}
void BlobProto::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.BlobProto.content)
}
#if LANG_CXX11
void BlobProto::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.BlobProto.content)
}
#endif
void BlobProto::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.BlobProto.content)
}
void BlobProto::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.BlobProto.content)
}
::std::string* BlobProto::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProto.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlobProto::release_content() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProto.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlobProto::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProto.content)
}

// optional .caffe2.QTensorProto qtensor = 5;
bool BlobProto::has_qtensor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BlobProto::set_has_qtensor() {
  _has_bits_[0] |= 0x00000010u;
}
void BlobProto::clear_has_qtensor() {
  _has_bits_[0] &= ~0x00000010u;
}
void BlobProto::clear_qtensor() {
  if (qtensor_ != NULL) qtensor_->::caffe2::QTensorProto::Clear();
  clear_has_qtensor();
}
const ::caffe2::QTensorProto& BlobProto::qtensor() const {
  const ::caffe2::QTensorProto* p = qtensor_;
  // @@protoc_insertion_point(field_get:caffe2.BlobProto.qtensor)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe2::QTensorProto*>(
      &::caffe2::_QTensorProto_default_instance_);
}
::caffe2::QTensorProto* BlobProto::mutable_qtensor() {
  set_has_qtensor();
  if (qtensor_ == NULL) {
    qtensor_ = new ::caffe2::QTensorProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProto.qtensor)
  return qtensor_;
}
::caffe2::QTensorProto* BlobProto::release_qtensor() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProto.qtensor)
  clear_has_qtensor();
  ::caffe2::QTensorProto* temp = qtensor_;
  qtensor_ = NULL;
  return temp;
}
void BlobProto::set_allocated_qtensor(::caffe2::QTensorProto* qtensor) {
  delete qtensor_;
  qtensor_ = qtensor;
  if (qtensor) {
    set_has_qtensor();
  } else {
    clear_has_qtensor();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProto.qtensor)
}

// optional int32 content_num_chunks = 6;
bool BlobProto::has_content_num_chunks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BlobProto::set_has_content_num_chunks() {
  _has_bits_[0] |= 0x00000020u;
}
void BlobProto::clear_has_content_num_chunks() {
  _has_bits_[0] &= ~0x00000020u;
}
void BlobProto::clear_content_num_chunks() {
  content_num_chunks_ = 0;
  clear_has_content_num_chunks();
}
::google::protobuf::int32 BlobProto::content_num_chunks() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobProto.content_num_chunks)
  return content_num_chunks_;
}
void BlobProto::set_content_num_chunks(::google::protobuf::int32 value) {
  set_has_content_num_chunks();
  content_num_chunks_ = value;
  // @@protoc_insertion_point(field_set:caffe2.BlobProto.content_num_chunks)
}

// optional int32 content_chunk_id = 7;
bool BlobProto::has_content_chunk_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BlobProto::set_has_content_chunk_id() {
  _has_bits_[0] |= 0x00000040u;
}
void BlobProto::clear_has_content_chunk_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void BlobProto::clear_content_chunk_id() {
  content_chunk_id_ = 0;
  clear_has_content_chunk_id();
}
::google::protobuf::int32 BlobProto::content_chunk_id() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobProto.content_chunk_id)
  return content_chunk_id_;
}
void BlobProto::set_content_chunk_id(::google::protobuf::int32 value) {
  set_has_content_chunk_id();
  content_chunk_id_ = value;
  // @@protoc_insertion_point(field_set:caffe2.BlobProto.content_chunk_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DBReaderProto::kNameFieldNumber;
const int DBReaderProto::kSourceFieldNumber;
const int DBReaderProto::kDbTypeFieldNumber;
const int DBReaderProto::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DBReaderProto::DBReaderProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_caffe2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.DBReaderProto)
}
DBReaderProto::DBReaderProto(const DBReaderProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  db_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_db_type()) {
    db_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_type_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe2.DBReaderProto)
}

void DBReaderProto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DBReaderProto::~DBReaderProto() {
  // @@protoc_insertion_point(destructor:caffe2.DBReaderProto)
  SharedDtor();
}

void DBReaderProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DBReaderProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBReaderProto::descriptor() {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DBReaderProto& DBReaderProto::default_instance() {
  protobuf_caffe2_2eproto::InitDefaults();
  return *internal_default_instance();
}

DBReaderProto* DBReaderProto::New(::google::protobuf::Arena* arena) const {
  DBReaderProto* n = new DBReaderProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBReaderProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.DBReaderProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!db_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*db_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DBReaderProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.DBReaderProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.DBReaderProto.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.DBReaderProto.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string db_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_type().data(), static_cast<int>(this->db_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.DBReaderProto.db_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.DBReaderProto.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.DBReaderProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.DBReaderProto)
  return false;
#undef DO_
}

void DBReaderProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.DBReaderProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.DBReaderProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string source = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.DBReaderProto.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source(), output);
  }

  // optional string db_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_type().data(), static_cast<int>(this->db_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.DBReaderProto.db_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->db_type(), output);
  }

  // optional string key = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.DBReaderProto.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.DBReaderProto)
}

::google::protobuf::uint8* DBReaderProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.DBReaderProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.DBReaderProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string source = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.DBReaderProto.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  // optional string db_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_type().data(), static_cast<int>(this->db_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.DBReaderProto.db_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db_type(), target);
  }

  // optional string key = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.DBReaderProto.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.DBReaderProto)
  return target;
}

size_t DBReaderProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.DBReaderProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string source = 2;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string db_type = 3;
    if (has_db_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_type());
    }

    // optional string key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBReaderProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.DBReaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  const DBReaderProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DBReaderProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.DBReaderProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.DBReaderProto)
    MergeFrom(*source);
  }
}

void DBReaderProto::MergeFrom(const DBReaderProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.DBReaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_db_type();
      db_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
}

void DBReaderProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.DBReaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBReaderProto::CopyFrom(const DBReaderProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.DBReaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBReaderProto::IsInitialized() const {
  return true;
}

void DBReaderProto::Swap(DBReaderProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBReaderProto::InternalSwap(DBReaderProto* other) {
  using std::swap;
  name_.Swap(&other->name_);
  source_.Swap(&other->source_);
  db_type_.Swap(&other->db_type_);
  key_.Swap(&other->key_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBReaderProto::GetMetadata() const {
  protobuf_caffe2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_caffe2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBReaderProto

// optional string name = 1;
bool DBReaderProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DBReaderProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void DBReaderProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void DBReaderProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& DBReaderProto::name() const {
  // @@protoc_insertion_point(field_get:caffe2.DBReaderProto.name)
  return name_.GetNoArena();
}
void DBReaderProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.DBReaderProto.name)
}
#if LANG_CXX11
void DBReaderProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.DBReaderProto.name)
}
#endif
void DBReaderProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.DBReaderProto.name)
}
void DBReaderProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.DBReaderProto.name)
}
::std::string* DBReaderProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.DBReaderProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DBReaderProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.DBReaderProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DBReaderProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.DBReaderProto.name)
}

// optional string source = 2;
bool DBReaderProto::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DBReaderProto::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
void DBReaderProto::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
void DBReaderProto::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& DBReaderProto::source() const {
  // @@protoc_insertion_point(field_get:caffe2.DBReaderProto.source)
  return source_.GetNoArena();
}
void DBReaderProto::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.DBReaderProto.source)
}
#if LANG_CXX11
void DBReaderProto::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.DBReaderProto.source)
}
#endif
void DBReaderProto::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.DBReaderProto.source)
}
void DBReaderProto::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.DBReaderProto.source)
}
::std::string* DBReaderProto::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe2.DBReaderProto.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DBReaderProto::release_source() {
  // @@protoc_insertion_point(field_release:caffe2.DBReaderProto.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DBReaderProto::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe2.DBReaderProto.source)
}

// optional string db_type = 3;
bool DBReaderProto::has_db_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DBReaderProto::set_has_db_type() {
  _has_bits_[0] |= 0x00000004u;
}
void DBReaderProto::clear_has_db_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void DBReaderProto::clear_db_type() {
  db_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db_type();
}
const ::std::string& DBReaderProto::db_type() const {
  // @@protoc_insertion_point(field_get:caffe2.DBReaderProto.db_type)
  return db_type_.GetNoArena();
}
void DBReaderProto::set_db_type(const ::std::string& value) {
  set_has_db_type();
  db_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.DBReaderProto.db_type)
}
#if LANG_CXX11
void DBReaderProto::set_db_type(::std::string&& value) {
  set_has_db_type();
  db_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.DBReaderProto.db_type)
}
#endif
void DBReaderProto::set_db_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db_type();
  db_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.DBReaderProto.db_type)
}
void DBReaderProto::set_db_type(const char* value, size_t size) {
  set_has_db_type();
  db_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.DBReaderProto.db_type)
}
::std::string* DBReaderProto::mutable_db_type() {
  set_has_db_type();
  // @@protoc_insertion_point(field_mutable:caffe2.DBReaderProto.db_type)
  return db_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DBReaderProto::release_db_type() {
  // @@protoc_insertion_point(field_release:caffe2.DBReaderProto.db_type)
  clear_has_db_type();
  return db_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DBReaderProto::set_allocated_db_type(::std::string* db_type) {
  if (db_type != NULL) {
    set_has_db_type();
  } else {
    clear_has_db_type();
  }
  db_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.DBReaderProto.db_type)
}

// optional string key = 4;
bool DBReaderProto::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DBReaderProto::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
void DBReaderProto::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void DBReaderProto::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& DBReaderProto::key() const {
  // @@protoc_insertion_point(field_get:caffe2.DBReaderProto.key)
  return key_.GetNoArena();
}
void DBReaderProto::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.DBReaderProto.key)
}
#if LANG_CXX11
void DBReaderProto::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.DBReaderProto.key)
}
#endif
void DBReaderProto::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.DBReaderProto.key)
}
void DBReaderProto::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.DBReaderProto.key)
}
::std::string* DBReaderProto::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:caffe2.DBReaderProto.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DBReaderProto::release_key() {
  // @@protoc_insertion_point(field_release:caffe2.DBReaderProto.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DBReaderProto::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:caffe2.DBReaderProto.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)

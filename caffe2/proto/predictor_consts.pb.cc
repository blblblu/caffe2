// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: predictor_consts.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "predictor_consts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {
class PredictorConstsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PredictorConsts>
     _instance;
} _PredictorConsts_default_instance_;

namespace protobuf_predictor_5fconsts_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, meta_net_def_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, predictor_dbreader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, parameters_blob_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, inputs_blob_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, outputs_blob_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, global_init_net_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, predict_init_net_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, predict_net_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, single_predictor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, multi_predictor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, train_init_plan_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, train_plan_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(PredictorConsts)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PredictorConsts_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "predictor_consts.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  PredictorConsts::_default_meta_net_def_.DefaultConstruct();
  *PredictorConsts::_default_meta_net_def_.get_mutable() = ::std::string("!!META_NET_DEF", 14);
  ::google::protobuf::internal::OnShutdownDestroyString(
      PredictorConsts::_default_meta_net_def_.get_mutable());
  PredictorConsts::_default_predictor_dbreader_.DefaultConstruct();
  *PredictorConsts::_default_predictor_dbreader_.get_mutable() = ::std::string("!!PREDICTOR_DBREADER", 20);
  ::google::protobuf::internal::OnShutdownDestroyString(
      PredictorConsts::_default_predictor_dbreader_.get_mutable());
  PredictorConsts::_default_parameters_blob_type_.DefaultConstruct();
  *PredictorConsts::_default_parameters_blob_type_.get_mutable() = ::std::string("PARAMETERS_BLOB_TYPE", 20);
  ::google::protobuf::internal::OnShutdownDestroyString(
      PredictorConsts::_default_parameters_blob_type_.get_mutable());
  PredictorConsts::_default_inputs_blob_type_.DefaultConstruct();
  *PredictorConsts::_default_inputs_blob_type_.get_mutable() = ::std::string("INPUTS_BLOB_TYPE", 16);
  ::google::protobuf::internal::OnShutdownDestroyString(
      PredictorConsts::_default_inputs_blob_type_.get_mutable());
  PredictorConsts::_default_outputs_blob_type_.DefaultConstruct();
  *PredictorConsts::_default_outputs_blob_type_.get_mutable() = ::std::string("OUTPUTS_BLOB_TYPE", 17);
  ::google::protobuf::internal::OnShutdownDestroyString(
      PredictorConsts::_default_outputs_blob_type_.get_mutable());
  PredictorConsts::_default_global_init_net_type_.DefaultConstruct();
  *PredictorConsts::_default_global_init_net_type_.get_mutable() = ::std::string("GLOBAL_INIT_NET_TYPE", 20);
  ::google::protobuf::internal::OnShutdownDestroyString(
      PredictorConsts::_default_global_init_net_type_.get_mutable());
  PredictorConsts::_default_predict_init_net_type_.DefaultConstruct();
  *PredictorConsts::_default_predict_init_net_type_.get_mutable() = ::std::string("PREDICT_INIT_NET_TYPE", 21);
  ::google::protobuf::internal::OnShutdownDestroyString(
      PredictorConsts::_default_predict_init_net_type_.get_mutable());
  PredictorConsts::_default_predict_net_type_.DefaultConstruct();
  *PredictorConsts::_default_predict_net_type_.get_mutable() = ::std::string("PREDICT_NET_TYPE", 16);
  ::google::protobuf::internal::OnShutdownDestroyString(
      PredictorConsts::_default_predict_net_type_.get_mutable());
  PredictorConsts::_default_single_predictor_.DefaultConstruct();
  *PredictorConsts::_default_single_predictor_.get_mutable() = ::std::string("SINGLE_PREDICTOR", 16);
  ::google::protobuf::internal::OnShutdownDestroyString(
      PredictorConsts::_default_single_predictor_.get_mutable());
  PredictorConsts::_default_multi_predictor_.DefaultConstruct();
  *PredictorConsts::_default_multi_predictor_.get_mutable() = ::std::string("MULTI_PREDICTOR", 15);
  ::google::protobuf::internal::OnShutdownDestroyString(
      PredictorConsts::_default_multi_predictor_.get_mutable());
  PredictorConsts::_default_train_init_plan_type_.DefaultConstruct();
  *PredictorConsts::_default_train_init_plan_type_.get_mutable() = ::std::string("TRAIN_INIT_PLAN_TYPE", 20);
  ::google::protobuf::internal::OnShutdownDestroyString(
      PredictorConsts::_default_train_init_plan_type_.get_mutable());
  PredictorConsts::_default_train_plan_type_.DefaultConstruct();
  *PredictorConsts::_default_train_plan_type_.get_mutable() = ::std::string("TRAIN_PLAN_TYPE", 15);
  ::google::protobuf::internal::OnShutdownDestroyString(
      PredictorConsts::_default_train_plan_type_.get_mutable());
  _PredictorConsts_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PredictorConsts_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026predictor_consts.proto\022\006caffe2\"\301\004\n\017Pre"
      "dictorConsts\022$\n\014META_NET_DEF\030\001 \001(\t:\016!!ME"
      "TA_NET_DEF\0220\n\022PREDICTOR_DBREADER\030\002 \001(\t:\024"
      "!!PREDICTOR_DBREADER\0222\n\024PARAMETERS_BLOB_"
      "TYPE\030\003 \001(\t:\024PARAMETERS_BLOB_TYPE\022*\n\020INPU"
      "TS_BLOB_TYPE\030\004 \001(\t:\020INPUTS_BLOB_TYPE\022,\n\021"
      "OUTPUTS_BLOB_TYPE\030\005 \001(\t:\021OUTPUTS_BLOB_TY"
      "PE\0222\n\024GLOBAL_INIT_NET_TYPE\030\006 \001(\t:\024GLOBAL"
      "_INIT_NET_TYPE\0224\n\025PREDICT_INIT_NET_TYPE\030"
      "\007 \001(\t:\025PREDICT_INIT_NET_TYPE\022*\n\020PREDICT_"
      "NET_TYPE\030\010 \001(\t:\020PREDICT_NET_TYPE\022*\n\020SING"
      "LE_PREDICTOR\030\t \001(\t:\020SINGLE_PREDICTOR\022(\n\017"
      "MULTI_PREDICTOR\030\n \001(\t:\017MULTI_PREDICTOR\0222"
      "\n\024TRAIN_INIT_PLAN_TYPE\030\013 \001(\t:\024TRAIN_INIT"
      "_PLAN_TYPE\022(\n\017TRAIN_PLAN_TYPE\030\014 \001(\t:\017TRA"
      "IN_PLAN_TYPE"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 612);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "predictor_consts.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_predictor_5fconsts_2eproto


// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> PredictorConsts::_default_meta_net_def_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> PredictorConsts::_default_predictor_dbreader_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> PredictorConsts::_default_parameters_blob_type_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> PredictorConsts::_default_inputs_blob_type_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> PredictorConsts::_default_outputs_blob_type_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> PredictorConsts::_default_global_init_net_type_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> PredictorConsts::_default_predict_init_net_type_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> PredictorConsts::_default_predict_net_type_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> PredictorConsts::_default_single_predictor_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> PredictorConsts::_default_multi_predictor_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> PredictorConsts::_default_train_init_plan_type_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> PredictorConsts::_default_train_plan_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictorConsts::kMETANETDEFFieldNumber;
const int PredictorConsts::kPREDICTORDBREADERFieldNumber;
const int PredictorConsts::kPARAMETERSBLOBTYPEFieldNumber;
const int PredictorConsts::kINPUTSBLOBTYPEFieldNumber;
const int PredictorConsts::kOUTPUTSBLOBTYPEFieldNumber;
const int PredictorConsts::kGLOBALINITNETTYPEFieldNumber;
const int PredictorConsts::kPREDICTINITNETTYPEFieldNumber;
const int PredictorConsts::kPREDICTNETTYPEFieldNumber;
const int PredictorConsts::kSINGLEPREDICTORFieldNumber;
const int PredictorConsts::kMULTIPREDICTORFieldNumber;
const int PredictorConsts::kTRAININITPLANTYPEFieldNumber;
const int PredictorConsts::kTRAINPLANTYPEFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictorConsts::PredictorConsts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_predictor_5fconsts_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.PredictorConsts)
}
PredictorConsts::PredictorConsts(const PredictorConsts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  meta_net_def_.UnsafeSetDefault(&PredictorConsts::_default_meta_net_def_.get());
  if (from.has_meta_net_def()) {
    meta_net_def_.AssignWithDefault(&PredictorConsts::_default_meta_net_def_.get(), from.meta_net_def_);
  }
  predictor_dbreader_.UnsafeSetDefault(&PredictorConsts::_default_predictor_dbreader_.get());
  if (from.has_predictor_dbreader()) {
    predictor_dbreader_.AssignWithDefault(&PredictorConsts::_default_predictor_dbreader_.get(), from.predictor_dbreader_);
  }
  parameters_blob_type_.UnsafeSetDefault(&PredictorConsts::_default_parameters_blob_type_.get());
  if (from.has_parameters_blob_type()) {
    parameters_blob_type_.AssignWithDefault(&PredictorConsts::_default_parameters_blob_type_.get(), from.parameters_blob_type_);
  }
  inputs_blob_type_.UnsafeSetDefault(&PredictorConsts::_default_inputs_blob_type_.get());
  if (from.has_inputs_blob_type()) {
    inputs_blob_type_.AssignWithDefault(&PredictorConsts::_default_inputs_blob_type_.get(), from.inputs_blob_type_);
  }
  outputs_blob_type_.UnsafeSetDefault(&PredictorConsts::_default_outputs_blob_type_.get());
  if (from.has_outputs_blob_type()) {
    outputs_blob_type_.AssignWithDefault(&PredictorConsts::_default_outputs_blob_type_.get(), from.outputs_blob_type_);
  }
  global_init_net_type_.UnsafeSetDefault(&PredictorConsts::_default_global_init_net_type_.get());
  if (from.has_global_init_net_type()) {
    global_init_net_type_.AssignWithDefault(&PredictorConsts::_default_global_init_net_type_.get(), from.global_init_net_type_);
  }
  predict_init_net_type_.UnsafeSetDefault(&PredictorConsts::_default_predict_init_net_type_.get());
  if (from.has_predict_init_net_type()) {
    predict_init_net_type_.AssignWithDefault(&PredictorConsts::_default_predict_init_net_type_.get(), from.predict_init_net_type_);
  }
  predict_net_type_.UnsafeSetDefault(&PredictorConsts::_default_predict_net_type_.get());
  if (from.has_predict_net_type()) {
    predict_net_type_.AssignWithDefault(&PredictorConsts::_default_predict_net_type_.get(), from.predict_net_type_);
  }
  single_predictor_.UnsafeSetDefault(&PredictorConsts::_default_single_predictor_.get());
  if (from.has_single_predictor()) {
    single_predictor_.AssignWithDefault(&PredictorConsts::_default_single_predictor_.get(), from.single_predictor_);
  }
  multi_predictor_.UnsafeSetDefault(&PredictorConsts::_default_multi_predictor_.get());
  if (from.has_multi_predictor()) {
    multi_predictor_.AssignWithDefault(&PredictorConsts::_default_multi_predictor_.get(), from.multi_predictor_);
  }
  train_init_plan_type_.UnsafeSetDefault(&PredictorConsts::_default_train_init_plan_type_.get());
  if (from.has_train_init_plan_type()) {
    train_init_plan_type_.AssignWithDefault(&PredictorConsts::_default_train_init_plan_type_.get(), from.train_init_plan_type_);
  }
  train_plan_type_.UnsafeSetDefault(&PredictorConsts::_default_train_plan_type_.get());
  if (from.has_train_plan_type()) {
    train_plan_type_.AssignWithDefault(&PredictorConsts::_default_train_plan_type_.get(), from.train_plan_type_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe2.PredictorConsts)
}

void PredictorConsts::SharedCtor() {
  _cached_size_ = 0;
  meta_net_def_.UnsafeSetDefault(&PredictorConsts::_default_meta_net_def_.get());
  predictor_dbreader_.UnsafeSetDefault(&PredictorConsts::_default_predictor_dbreader_.get());
  parameters_blob_type_.UnsafeSetDefault(&PredictorConsts::_default_parameters_blob_type_.get());
  inputs_blob_type_.UnsafeSetDefault(&PredictorConsts::_default_inputs_blob_type_.get());
  outputs_blob_type_.UnsafeSetDefault(&PredictorConsts::_default_outputs_blob_type_.get());
  global_init_net_type_.UnsafeSetDefault(&PredictorConsts::_default_global_init_net_type_.get());
  predict_init_net_type_.UnsafeSetDefault(&PredictorConsts::_default_predict_init_net_type_.get());
  predict_net_type_.UnsafeSetDefault(&PredictorConsts::_default_predict_net_type_.get());
  single_predictor_.UnsafeSetDefault(&PredictorConsts::_default_single_predictor_.get());
  multi_predictor_.UnsafeSetDefault(&PredictorConsts::_default_multi_predictor_.get());
  train_init_plan_type_.UnsafeSetDefault(&PredictorConsts::_default_train_init_plan_type_.get());
  train_plan_type_.UnsafeSetDefault(&PredictorConsts::_default_train_plan_type_.get());
}

PredictorConsts::~PredictorConsts() {
  // @@protoc_insertion_point(destructor:caffe2.PredictorConsts)
  SharedDtor();
}

void PredictorConsts::SharedDtor() {
  meta_net_def_.DestroyNoArena(&PredictorConsts::_default_meta_net_def_.get());
  predictor_dbreader_.DestroyNoArena(&PredictorConsts::_default_predictor_dbreader_.get());
  parameters_blob_type_.DestroyNoArena(&PredictorConsts::_default_parameters_blob_type_.get());
  inputs_blob_type_.DestroyNoArena(&PredictorConsts::_default_inputs_blob_type_.get());
  outputs_blob_type_.DestroyNoArena(&PredictorConsts::_default_outputs_blob_type_.get());
  global_init_net_type_.DestroyNoArena(&PredictorConsts::_default_global_init_net_type_.get());
  predict_init_net_type_.DestroyNoArena(&PredictorConsts::_default_predict_init_net_type_.get());
  predict_net_type_.DestroyNoArena(&PredictorConsts::_default_predict_net_type_.get());
  single_predictor_.DestroyNoArena(&PredictorConsts::_default_single_predictor_.get());
  multi_predictor_.DestroyNoArena(&PredictorConsts::_default_multi_predictor_.get());
  train_init_plan_type_.DestroyNoArena(&PredictorConsts::_default_train_init_plan_type_.get());
  train_plan_type_.DestroyNoArena(&PredictorConsts::_default_train_plan_type_.get());
}

void PredictorConsts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictorConsts::descriptor() {
  protobuf_predictor_5fconsts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_5fconsts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PredictorConsts& PredictorConsts::default_instance() {
  protobuf_predictor_5fconsts_2eproto::InitDefaults();
  return *internal_default_instance();
}

PredictorConsts* PredictorConsts::New(::google::protobuf::Arena* arena) const {
  PredictorConsts* n = new PredictorConsts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PredictorConsts::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.PredictorConsts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!meta_net_def_.IsDefault(&PredictorConsts::_default_meta_net_def_.get()));
      (*meta_net_def_.UnsafeRawStringPointer())->assign(*&PredictorConsts::_default_meta_net_def_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!predictor_dbreader_.IsDefault(&PredictorConsts::_default_predictor_dbreader_.get()));
      (*predictor_dbreader_.UnsafeRawStringPointer())->assign(*&PredictorConsts::_default_predictor_dbreader_.get());
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!parameters_blob_type_.IsDefault(&PredictorConsts::_default_parameters_blob_type_.get()));
      (*parameters_blob_type_.UnsafeRawStringPointer())->assign(*&PredictorConsts::_default_parameters_blob_type_.get());
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!inputs_blob_type_.IsDefault(&PredictorConsts::_default_inputs_blob_type_.get()));
      (*inputs_blob_type_.UnsafeRawStringPointer())->assign(*&PredictorConsts::_default_inputs_blob_type_.get());
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!outputs_blob_type_.IsDefault(&PredictorConsts::_default_outputs_blob_type_.get()));
      (*outputs_blob_type_.UnsafeRawStringPointer())->assign(*&PredictorConsts::_default_outputs_blob_type_.get());
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!global_init_net_type_.IsDefault(&PredictorConsts::_default_global_init_net_type_.get()));
      (*global_init_net_type_.UnsafeRawStringPointer())->assign(*&PredictorConsts::_default_global_init_net_type_.get());
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!predict_init_net_type_.IsDefault(&PredictorConsts::_default_predict_init_net_type_.get()));
      (*predict_init_net_type_.UnsafeRawStringPointer())->assign(*&PredictorConsts::_default_predict_init_net_type_.get());
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!predict_net_type_.IsDefault(&PredictorConsts::_default_predict_net_type_.get()));
      (*predict_net_type_.UnsafeRawStringPointer())->assign(*&PredictorConsts::_default_predict_net_type_.get());
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!single_predictor_.IsDefault(&PredictorConsts::_default_single_predictor_.get()));
      (*single_predictor_.UnsafeRawStringPointer())->assign(*&PredictorConsts::_default_single_predictor_.get());
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!multi_predictor_.IsDefault(&PredictorConsts::_default_multi_predictor_.get()));
      (*multi_predictor_.UnsafeRawStringPointer())->assign(*&PredictorConsts::_default_multi_predictor_.get());
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(!train_init_plan_type_.IsDefault(&PredictorConsts::_default_train_init_plan_type_.get()));
      (*train_init_plan_type_.UnsafeRawStringPointer())->assign(*&PredictorConsts::_default_train_init_plan_type_.get());
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(!train_plan_type_.IsDefault(&PredictorConsts::_default_train_plan_type_.get()));
      (*train_plan_type_.UnsafeRawStringPointer())->assign(*&PredictorConsts::_default_train_plan_type_.get());
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PredictorConsts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.PredictorConsts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meta_net_def()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meta_net_def().data(), static_cast<int>(this->meta_net_def().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.META_NET_DEF");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predictor_dbreader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->predictor_dbreader().data(), static_cast<int>(this->predictor_dbreader().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.PREDICTOR_DBREADER");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameters_blob_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parameters_blob_type().data(), static_cast<int>(this->parameters_blob_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inputs_blob_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inputs_blob_type().data(), static_cast<int>(this->inputs_blob_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.INPUTS_BLOB_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outputs_blob_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->outputs_blob_type().data(), static_cast<int>(this->outputs_blob_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_global_init_net_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->global_init_net_type().data(), static_cast<int>(this->global_init_net_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predict_init_net_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->predict_init_net_type().data(), static_cast<int>(this->predict_init_net_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predict_net_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->predict_net_type().data(), static_cast<int>(this->predict_net_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.PREDICT_NET_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_single_predictor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->single_predictor().data(), static_cast<int>(this->single_predictor().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.SINGLE_PREDICTOR");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multi_predictor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->multi_predictor().data(), static_cast<int>(this->multi_predictor().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.MULTI_PREDICTOR");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_init_plan_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->train_init_plan_type().data(), static_cast<int>(this->train_init_plan_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_plan_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->train_plan_type().data(), static_cast<int>(this->train_plan_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.TRAIN_PLAN_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.PredictorConsts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.PredictorConsts)
  return false;
#undef DO_
}

void PredictorConsts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.PredictorConsts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meta_net_def().data(), static_cast<int>(this->meta_net_def().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.META_NET_DEF");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->meta_net_def(), output);
  }

  // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predictor_dbreader().data(), static_cast<int>(this->predictor_dbreader().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICTOR_DBREADER");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->predictor_dbreader(), output);
  }

  // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameters_blob_type().data(), static_cast<int>(this->parameters_blob_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parameters_blob_type(), output);
  }

  // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inputs_blob_type().data(), static_cast<int>(this->inputs_blob_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.INPUTS_BLOB_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->inputs_blob_type(), output);
  }

  // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outputs_blob_type().data(), static_cast<int>(this->outputs_blob_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->outputs_blob_type(), output);
  }

  // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->global_init_net_type().data(), static_cast<int>(this->global_init_net_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->global_init_net_type(), output);
  }

  // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_init_net_type().data(), static_cast<int>(this->predict_init_net_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->predict_init_net_type(), output);
  }

  // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_net_type().data(), static_cast<int>(this->predict_net_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICT_NET_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->predict_net_type(), output);
  }

  // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->single_predictor().data(), static_cast<int>(this->single_predictor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.SINGLE_PREDICTOR");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->single_predictor(), output);
  }

  // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multi_predictor().data(), static_cast<int>(this->multi_predictor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.MULTI_PREDICTOR");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->multi_predictor(), output);
  }

  // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_init_plan_type().data(), static_cast<int>(this->train_init_plan_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->train_init_plan_type(), output);
  }

  // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_plan_type().data(), static_cast<int>(this->train_plan_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.TRAIN_PLAN_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->train_plan_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.PredictorConsts)
}

::google::protobuf::uint8* PredictorConsts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.PredictorConsts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meta_net_def().data(), static_cast<int>(this->meta_net_def().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.META_NET_DEF");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->meta_net_def(), target);
  }

  // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predictor_dbreader().data(), static_cast<int>(this->predictor_dbreader().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICTOR_DBREADER");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->predictor_dbreader(), target);
  }

  // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameters_blob_type().data(), static_cast<int>(this->parameters_blob_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parameters_blob_type(), target);
  }

  // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inputs_blob_type().data(), static_cast<int>(this->inputs_blob_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.INPUTS_BLOB_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->inputs_blob_type(), target);
  }

  // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outputs_blob_type().data(), static_cast<int>(this->outputs_blob_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->outputs_blob_type(), target);
  }

  // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->global_init_net_type().data(), static_cast<int>(this->global_init_net_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->global_init_net_type(), target);
  }

  // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_init_net_type().data(), static_cast<int>(this->predict_init_net_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->predict_init_net_type(), target);
  }

  // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_net_type().data(), static_cast<int>(this->predict_net_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICT_NET_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->predict_net_type(), target);
  }

  // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->single_predictor().data(), static_cast<int>(this->single_predictor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.SINGLE_PREDICTOR");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->single_predictor(), target);
  }

  // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multi_predictor().data(), static_cast<int>(this->multi_predictor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.MULTI_PREDICTOR");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->multi_predictor(), target);
  }

  // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_init_plan_type().data(), static_cast<int>(this->train_init_plan_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->train_init_plan_type(), target);
  }

  // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_plan_type().data(), static_cast<int>(this->train_plan_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.TRAIN_PLAN_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->train_plan_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.PredictorConsts)
  return target;
}

size_t PredictorConsts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.PredictorConsts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
    if (has_meta_net_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meta_net_def());
    }

    // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
    if (has_predictor_dbreader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predictor_dbreader());
    }

    // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
    if (has_parameters_blob_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parameters_blob_type());
    }

    // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
    if (has_inputs_blob_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inputs_blob_type());
    }

    // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
    if (has_outputs_blob_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outputs_blob_type());
    }

    // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
    if (has_global_init_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->global_init_net_type());
    }

    // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
    if (has_predict_init_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predict_init_net_type());
    }

    // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
    if (has_predict_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predict_net_type());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
    if (has_single_predictor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->single_predictor());
    }

    // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
    if (has_multi_predictor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multi_predictor());
    }

    // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
    if (has_train_init_plan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_init_plan_type());
    }

    // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
    if (has_train_plan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_plan_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictorConsts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.PredictorConsts)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictorConsts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictorConsts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.PredictorConsts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.PredictorConsts)
    MergeFrom(*source);
  }
}

void PredictorConsts::MergeFrom(const PredictorConsts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.PredictorConsts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_meta_net_def();
      meta_net_def_.AssignWithDefault(&PredictorConsts::_default_meta_net_def_.get(), from.meta_net_def_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_predictor_dbreader();
      predictor_dbreader_.AssignWithDefault(&PredictorConsts::_default_predictor_dbreader_.get(), from.predictor_dbreader_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_parameters_blob_type();
      parameters_blob_type_.AssignWithDefault(&PredictorConsts::_default_parameters_blob_type_.get(), from.parameters_blob_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_inputs_blob_type();
      inputs_blob_type_.AssignWithDefault(&PredictorConsts::_default_inputs_blob_type_.get(), from.inputs_blob_type_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_outputs_blob_type();
      outputs_blob_type_.AssignWithDefault(&PredictorConsts::_default_outputs_blob_type_.get(), from.outputs_blob_type_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_global_init_net_type();
      global_init_net_type_.AssignWithDefault(&PredictorConsts::_default_global_init_net_type_.get(), from.global_init_net_type_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_predict_init_net_type();
      predict_init_net_type_.AssignWithDefault(&PredictorConsts::_default_predict_init_net_type_.get(), from.predict_init_net_type_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_predict_net_type();
      predict_net_type_.AssignWithDefault(&PredictorConsts::_default_predict_net_type_.get(), from.predict_net_type_);
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_single_predictor();
      single_predictor_.AssignWithDefault(&PredictorConsts::_default_single_predictor_.get(), from.single_predictor_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_multi_predictor();
      multi_predictor_.AssignWithDefault(&PredictorConsts::_default_multi_predictor_.get(), from.multi_predictor_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_train_init_plan_type();
      train_init_plan_type_.AssignWithDefault(&PredictorConsts::_default_train_init_plan_type_.get(), from.train_init_plan_type_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_train_plan_type();
      train_plan_type_.AssignWithDefault(&PredictorConsts::_default_train_plan_type_.get(), from.train_plan_type_);
    }
  }
}

void PredictorConsts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.PredictorConsts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictorConsts::CopyFrom(const PredictorConsts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.PredictorConsts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictorConsts::IsInitialized() const {
  return true;
}

void PredictorConsts::Swap(PredictorConsts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictorConsts::InternalSwap(PredictorConsts* other) {
  using std::swap;
  meta_net_def_.Swap(&other->meta_net_def_);
  predictor_dbreader_.Swap(&other->predictor_dbreader_);
  parameters_blob_type_.Swap(&other->parameters_blob_type_);
  inputs_blob_type_.Swap(&other->inputs_blob_type_);
  outputs_blob_type_.Swap(&other->outputs_blob_type_);
  global_init_net_type_.Swap(&other->global_init_net_type_);
  predict_init_net_type_.Swap(&other->predict_init_net_type_);
  predict_net_type_.Swap(&other->predict_net_type_);
  single_predictor_.Swap(&other->single_predictor_);
  multi_predictor_.Swap(&other->multi_predictor_);
  train_init_plan_type_.Swap(&other->train_init_plan_type_);
  train_plan_type_.Swap(&other->train_plan_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PredictorConsts::GetMetadata() const {
  protobuf_predictor_5fconsts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_predictor_5fconsts_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PredictorConsts

// optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
bool PredictorConsts::has_meta_net_def() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PredictorConsts::set_has_meta_net_def() {
  _has_bits_[0] |= 0x00000001u;
}
void PredictorConsts::clear_has_meta_net_def() {
  _has_bits_[0] &= ~0x00000001u;
}
void PredictorConsts::clear_meta_net_def() {
  meta_net_def_.ClearToDefaultNoArena(&PredictorConsts::_default_meta_net_def_.get());
  clear_has_meta_net_def();
}
const ::std::string& PredictorConsts::meta_net_def() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.META_NET_DEF)
  return meta_net_def_.GetNoArena();
}
void PredictorConsts::set_meta_net_def(const ::std::string& value) {
  set_has_meta_net_def();
  meta_net_def_.SetNoArena(&PredictorConsts::_default_meta_net_def_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.META_NET_DEF)
}
#if LANG_CXX11
void PredictorConsts::set_meta_net_def(::std::string&& value) {
  set_has_meta_net_def();
  meta_net_def_.SetNoArena(
    &PredictorConsts::_default_meta_net_def_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.META_NET_DEF)
}
#endif
void PredictorConsts::set_meta_net_def(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meta_net_def();
  meta_net_def_.SetNoArena(&PredictorConsts::_default_meta_net_def_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.META_NET_DEF)
}
void PredictorConsts::set_meta_net_def(const char* value, size_t size) {
  set_has_meta_net_def();
  meta_net_def_.SetNoArena(&PredictorConsts::_default_meta_net_def_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.META_NET_DEF)
}
::std::string* PredictorConsts::mutable_meta_net_def() {
  set_has_meta_net_def();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.META_NET_DEF)
  return meta_net_def_.MutableNoArena(&PredictorConsts::_default_meta_net_def_.get());
}
::std::string* PredictorConsts::release_meta_net_def() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.META_NET_DEF)
  clear_has_meta_net_def();
  return meta_net_def_.ReleaseNoArena(&PredictorConsts::_default_meta_net_def_.get());
}
void PredictorConsts::set_allocated_meta_net_def(::std::string* meta_net_def) {
  if (meta_net_def != NULL) {
    set_has_meta_net_def();
  } else {
    clear_has_meta_net_def();
  }
  meta_net_def_.SetAllocatedNoArena(&PredictorConsts::_default_meta_net_def_.get(), meta_net_def);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.META_NET_DEF)
}

// optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
bool PredictorConsts::has_predictor_dbreader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PredictorConsts::set_has_predictor_dbreader() {
  _has_bits_[0] |= 0x00000002u;
}
void PredictorConsts::clear_has_predictor_dbreader() {
  _has_bits_[0] &= ~0x00000002u;
}
void PredictorConsts::clear_predictor_dbreader() {
  predictor_dbreader_.ClearToDefaultNoArena(&PredictorConsts::_default_predictor_dbreader_.get());
  clear_has_predictor_dbreader();
}
const ::std::string& PredictorConsts::predictor_dbreader() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PREDICTOR_DBREADER)
  return predictor_dbreader_.GetNoArena();
}
void PredictorConsts::set_predictor_dbreader(const ::std::string& value) {
  set_has_predictor_dbreader();
  predictor_dbreader_.SetNoArena(&PredictorConsts::_default_predictor_dbreader_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
#if LANG_CXX11
void PredictorConsts::set_predictor_dbreader(::std::string&& value) {
  set_has_predictor_dbreader();
  predictor_dbreader_.SetNoArena(
    &PredictorConsts::_default_predictor_dbreader_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
#endif
void PredictorConsts::set_predictor_dbreader(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_predictor_dbreader();
  predictor_dbreader_.SetNoArena(&PredictorConsts::_default_predictor_dbreader_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
void PredictorConsts::set_predictor_dbreader(const char* value, size_t size) {
  set_has_predictor_dbreader();
  predictor_dbreader_.SetNoArena(&PredictorConsts::_default_predictor_dbreader_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
::std::string* PredictorConsts::mutable_predictor_dbreader() {
  set_has_predictor_dbreader();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PREDICTOR_DBREADER)
  return predictor_dbreader_.MutableNoArena(&PredictorConsts::_default_predictor_dbreader_.get());
}
::std::string* PredictorConsts::release_predictor_dbreader() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PREDICTOR_DBREADER)
  clear_has_predictor_dbreader();
  return predictor_dbreader_.ReleaseNoArena(&PredictorConsts::_default_predictor_dbreader_.get());
}
void PredictorConsts::set_allocated_predictor_dbreader(::std::string* predictor_dbreader) {
  if (predictor_dbreader != NULL) {
    set_has_predictor_dbreader();
  } else {
    clear_has_predictor_dbreader();
  }
  predictor_dbreader_.SetAllocatedNoArena(&PredictorConsts::_default_predictor_dbreader_.get(), predictor_dbreader);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}

// optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
bool PredictorConsts::has_parameters_blob_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PredictorConsts::set_has_parameters_blob_type() {
  _has_bits_[0] |= 0x00000004u;
}
void PredictorConsts::clear_has_parameters_blob_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void PredictorConsts::clear_parameters_blob_type() {
  parameters_blob_type_.ClearToDefaultNoArena(&PredictorConsts::_default_parameters_blob_type_.get());
  clear_has_parameters_blob_type();
}
const ::std::string& PredictorConsts::parameters_blob_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
  return parameters_blob_type_.GetNoArena();
}
void PredictorConsts::set_parameters_blob_type(const ::std::string& value) {
  set_has_parameters_blob_type();
  parameters_blob_type_.SetNoArena(&PredictorConsts::_default_parameters_blob_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
#if LANG_CXX11
void PredictorConsts::set_parameters_blob_type(::std::string&& value) {
  set_has_parameters_blob_type();
  parameters_blob_type_.SetNoArena(
    &PredictorConsts::_default_parameters_blob_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
#endif
void PredictorConsts::set_parameters_blob_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parameters_blob_type();
  parameters_blob_type_.SetNoArena(&PredictorConsts::_default_parameters_blob_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
void PredictorConsts::set_parameters_blob_type(const char* value, size_t size) {
  set_has_parameters_blob_type();
  parameters_blob_type_.SetNoArena(&PredictorConsts::_default_parameters_blob_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
::std::string* PredictorConsts::mutable_parameters_blob_type() {
  set_has_parameters_blob_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
  return parameters_blob_type_.MutableNoArena(&PredictorConsts::_default_parameters_blob_type_.get());
}
::std::string* PredictorConsts::release_parameters_blob_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
  clear_has_parameters_blob_type();
  return parameters_blob_type_.ReleaseNoArena(&PredictorConsts::_default_parameters_blob_type_.get());
}
void PredictorConsts::set_allocated_parameters_blob_type(::std::string* parameters_blob_type) {
  if (parameters_blob_type != NULL) {
    set_has_parameters_blob_type();
  } else {
    clear_has_parameters_blob_type();
  }
  parameters_blob_type_.SetAllocatedNoArena(&PredictorConsts::_default_parameters_blob_type_.get(), parameters_blob_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}

// optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
bool PredictorConsts::has_inputs_blob_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PredictorConsts::set_has_inputs_blob_type() {
  _has_bits_[0] |= 0x00000008u;
}
void PredictorConsts::clear_has_inputs_blob_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void PredictorConsts::clear_inputs_blob_type() {
  inputs_blob_type_.ClearToDefaultNoArena(&PredictorConsts::_default_inputs_blob_type_.get());
  clear_has_inputs_blob_type();
}
const ::std::string& PredictorConsts::inputs_blob_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
  return inputs_blob_type_.GetNoArena();
}
void PredictorConsts::set_inputs_blob_type(const ::std::string& value) {
  set_has_inputs_blob_type();
  inputs_blob_type_.SetNoArena(&PredictorConsts::_default_inputs_blob_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
#if LANG_CXX11
void PredictorConsts::set_inputs_blob_type(::std::string&& value) {
  set_has_inputs_blob_type();
  inputs_blob_type_.SetNoArena(
    &PredictorConsts::_default_inputs_blob_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
#endif
void PredictorConsts::set_inputs_blob_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_inputs_blob_type();
  inputs_blob_type_.SetNoArena(&PredictorConsts::_default_inputs_blob_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
void PredictorConsts::set_inputs_blob_type(const char* value, size_t size) {
  set_has_inputs_blob_type();
  inputs_blob_type_.SetNoArena(&PredictorConsts::_default_inputs_blob_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
::std::string* PredictorConsts::mutable_inputs_blob_type() {
  set_has_inputs_blob_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
  return inputs_blob_type_.MutableNoArena(&PredictorConsts::_default_inputs_blob_type_.get());
}
::std::string* PredictorConsts::release_inputs_blob_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
  clear_has_inputs_blob_type();
  return inputs_blob_type_.ReleaseNoArena(&PredictorConsts::_default_inputs_blob_type_.get());
}
void PredictorConsts::set_allocated_inputs_blob_type(::std::string* inputs_blob_type) {
  if (inputs_blob_type != NULL) {
    set_has_inputs_blob_type();
  } else {
    clear_has_inputs_blob_type();
  }
  inputs_blob_type_.SetAllocatedNoArena(&PredictorConsts::_default_inputs_blob_type_.get(), inputs_blob_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}

// optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
bool PredictorConsts::has_outputs_blob_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PredictorConsts::set_has_outputs_blob_type() {
  _has_bits_[0] |= 0x00000010u;
}
void PredictorConsts::clear_has_outputs_blob_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void PredictorConsts::clear_outputs_blob_type() {
  outputs_blob_type_.ClearToDefaultNoArena(&PredictorConsts::_default_outputs_blob_type_.get());
  clear_has_outputs_blob_type();
}
const ::std::string& PredictorConsts::outputs_blob_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
  return outputs_blob_type_.GetNoArena();
}
void PredictorConsts::set_outputs_blob_type(const ::std::string& value) {
  set_has_outputs_blob_type();
  outputs_blob_type_.SetNoArena(&PredictorConsts::_default_outputs_blob_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
#if LANG_CXX11
void PredictorConsts::set_outputs_blob_type(::std::string&& value) {
  set_has_outputs_blob_type();
  outputs_blob_type_.SetNoArena(
    &PredictorConsts::_default_outputs_blob_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
#endif
void PredictorConsts::set_outputs_blob_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_outputs_blob_type();
  outputs_blob_type_.SetNoArena(&PredictorConsts::_default_outputs_blob_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
void PredictorConsts::set_outputs_blob_type(const char* value, size_t size) {
  set_has_outputs_blob_type();
  outputs_blob_type_.SetNoArena(&PredictorConsts::_default_outputs_blob_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
::std::string* PredictorConsts::mutable_outputs_blob_type() {
  set_has_outputs_blob_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
  return outputs_blob_type_.MutableNoArena(&PredictorConsts::_default_outputs_blob_type_.get());
}
::std::string* PredictorConsts::release_outputs_blob_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
  clear_has_outputs_blob_type();
  return outputs_blob_type_.ReleaseNoArena(&PredictorConsts::_default_outputs_blob_type_.get());
}
void PredictorConsts::set_allocated_outputs_blob_type(::std::string* outputs_blob_type) {
  if (outputs_blob_type != NULL) {
    set_has_outputs_blob_type();
  } else {
    clear_has_outputs_blob_type();
  }
  outputs_blob_type_.SetAllocatedNoArena(&PredictorConsts::_default_outputs_blob_type_.get(), outputs_blob_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}

// optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
bool PredictorConsts::has_global_init_net_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PredictorConsts::set_has_global_init_net_type() {
  _has_bits_[0] |= 0x00000020u;
}
void PredictorConsts::clear_has_global_init_net_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void PredictorConsts::clear_global_init_net_type() {
  global_init_net_type_.ClearToDefaultNoArena(&PredictorConsts::_default_global_init_net_type_.get());
  clear_has_global_init_net_type();
}
const ::std::string& PredictorConsts::global_init_net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
  return global_init_net_type_.GetNoArena();
}
void PredictorConsts::set_global_init_net_type(const ::std::string& value) {
  set_has_global_init_net_type();
  global_init_net_type_.SetNoArena(&PredictorConsts::_default_global_init_net_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
#if LANG_CXX11
void PredictorConsts::set_global_init_net_type(::std::string&& value) {
  set_has_global_init_net_type();
  global_init_net_type_.SetNoArena(
    &PredictorConsts::_default_global_init_net_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
#endif
void PredictorConsts::set_global_init_net_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_global_init_net_type();
  global_init_net_type_.SetNoArena(&PredictorConsts::_default_global_init_net_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
void PredictorConsts::set_global_init_net_type(const char* value, size_t size) {
  set_has_global_init_net_type();
  global_init_net_type_.SetNoArena(&PredictorConsts::_default_global_init_net_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
::std::string* PredictorConsts::mutable_global_init_net_type() {
  set_has_global_init_net_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
  return global_init_net_type_.MutableNoArena(&PredictorConsts::_default_global_init_net_type_.get());
}
::std::string* PredictorConsts::release_global_init_net_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
  clear_has_global_init_net_type();
  return global_init_net_type_.ReleaseNoArena(&PredictorConsts::_default_global_init_net_type_.get());
}
void PredictorConsts::set_allocated_global_init_net_type(::std::string* global_init_net_type) {
  if (global_init_net_type != NULL) {
    set_has_global_init_net_type();
  } else {
    clear_has_global_init_net_type();
  }
  global_init_net_type_.SetAllocatedNoArena(&PredictorConsts::_default_global_init_net_type_.get(), global_init_net_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}

// optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
bool PredictorConsts::has_predict_init_net_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PredictorConsts::set_has_predict_init_net_type() {
  _has_bits_[0] |= 0x00000040u;
}
void PredictorConsts::clear_has_predict_init_net_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void PredictorConsts::clear_predict_init_net_type() {
  predict_init_net_type_.ClearToDefaultNoArena(&PredictorConsts::_default_predict_init_net_type_.get());
  clear_has_predict_init_net_type();
}
const ::std::string& PredictorConsts::predict_init_net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
  return predict_init_net_type_.GetNoArena();
}
void PredictorConsts::set_predict_init_net_type(const ::std::string& value) {
  set_has_predict_init_net_type();
  predict_init_net_type_.SetNoArena(&PredictorConsts::_default_predict_init_net_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
#if LANG_CXX11
void PredictorConsts::set_predict_init_net_type(::std::string&& value) {
  set_has_predict_init_net_type();
  predict_init_net_type_.SetNoArena(
    &PredictorConsts::_default_predict_init_net_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
#endif
void PredictorConsts::set_predict_init_net_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_predict_init_net_type();
  predict_init_net_type_.SetNoArena(&PredictorConsts::_default_predict_init_net_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
void PredictorConsts::set_predict_init_net_type(const char* value, size_t size) {
  set_has_predict_init_net_type();
  predict_init_net_type_.SetNoArena(&PredictorConsts::_default_predict_init_net_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
::std::string* PredictorConsts::mutable_predict_init_net_type() {
  set_has_predict_init_net_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
  return predict_init_net_type_.MutableNoArena(&PredictorConsts::_default_predict_init_net_type_.get());
}
::std::string* PredictorConsts::release_predict_init_net_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
  clear_has_predict_init_net_type();
  return predict_init_net_type_.ReleaseNoArena(&PredictorConsts::_default_predict_init_net_type_.get());
}
void PredictorConsts::set_allocated_predict_init_net_type(::std::string* predict_init_net_type) {
  if (predict_init_net_type != NULL) {
    set_has_predict_init_net_type();
  } else {
    clear_has_predict_init_net_type();
  }
  predict_init_net_type_.SetAllocatedNoArena(&PredictorConsts::_default_predict_init_net_type_.get(), predict_init_net_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}

// optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
bool PredictorConsts::has_predict_net_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PredictorConsts::set_has_predict_net_type() {
  _has_bits_[0] |= 0x00000080u;
}
void PredictorConsts::clear_has_predict_net_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void PredictorConsts::clear_predict_net_type() {
  predict_net_type_.ClearToDefaultNoArena(&PredictorConsts::_default_predict_net_type_.get());
  clear_has_predict_net_type();
}
const ::std::string& PredictorConsts::predict_net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PREDICT_NET_TYPE)
  return predict_net_type_.GetNoArena();
}
void PredictorConsts::set_predict_net_type(const ::std::string& value) {
  set_has_predict_net_type();
  predict_net_type_.SetNoArena(&PredictorConsts::_default_predict_net_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
#if LANG_CXX11
void PredictorConsts::set_predict_net_type(::std::string&& value) {
  set_has_predict_net_type();
  predict_net_type_.SetNoArena(
    &PredictorConsts::_default_predict_net_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
#endif
void PredictorConsts::set_predict_net_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_predict_net_type();
  predict_net_type_.SetNoArena(&PredictorConsts::_default_predict_net_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
void PredictorConsts::set_predict_net_type(const char* value, size_t size) {
  set_has_predict_net_type();
  predict_net_type_.SetNoArena(&PredictorConsts::_default_predict_net_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
::std::string* PredictorConsts::mutable_predict_net_type() {
  set_has_predict_net_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PREDICT_NET_TYPE)
  return predict_net_type_.MutableNoArena(&PredictorConsts::_default_predict_net_type_.get());
}
::std::string* PredictorConsts::release_predict_net_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PREDICT_NET_TYPE)
  clear_has_predict_net_type();
  return predict_net_type_.ReleaseNoArena(&PredictorConsts::_default_predict_net_type_.get());
}
void PredictorConsts::set_allocated_predict_net_type(::std::string* predict_net_type) {
  if (predict_net_type != NULL) {
    set_has_predict_net_type();
  } else {
    clear_has_predict_net_type();
  }
  predict_net_type_.SetAllocatedNoArena(&PredictorConsts::_default_predict_net_type_.get(), predict_net_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}

// optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
bool PredictorConsts::has_single_predictor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PredictorConsts::set_has_single_predictor() {
  _has_bits_[0] |= 0x00000100u;
}
void PredictorConsts::clear_has_single_predictor() {
  _has_bits_[0] &= ~0x00000100u;
}
void PredictorConsts::clear_single_predictor() {
  single_predictor_.ClearToDefaultNoArena(&PredictorConsts::_default_single_predictor_.get());
  clear_has_single_predictor();
}
const ::std::string& PredictorConsts::single_predictor() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.SINGLE_PREDICTOR)
  return single_predictor_.GetNoArena();
}
void PredictorConsts::set_single_predictor(const ::std::string& value) {
  set_has_single_predictor();
  single_predictor_.SetNoArena(&PredictorConsts::_default_single_predictor_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
#if LANG_CXX11
void PredictorConsts::set_single_predictor(::std::string&& value) {
  set_has_single_predictor();
  single_predictor_.SetNoArena(
    &PredictorConsts::_default_single_predictor_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
#endif
void PredictorConsts::set_single_predictor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_single_predictor();
  single_predictor_.SetNoArena(&PredictorConsts::_default_single_predictor_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
void PredictorConsts::set_single_predictor(const char* value, size_t size) {
  set_has_single_predictor();
  single_predictor_.SetNoArena(&PredictorConsts::_default_single_predictor_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
::std::string* PredictorConsts::mutable_single_predictor() {
  set_has_single_predictor();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.SINGLE_PREDICTOR)
  return single_predictor_.MutableNoArena(&PredictorConsts::_default_single_predictor_.get());
}
::std::string* PredictorConsts::release_single_predictor() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.SINGLE_PREDICTOR)
  clear_has_single_predictor();
  return single_predictor_.ReleaseNoArena(&PredictorConsts::_default_single_predictor_.get());
}
void PredictorConsts::set_allocated_single_predictor(::std::string* single_predictor) {
  if (single_predictor != NULL) {
    set_has_single_predictor();
  } else {
    clear_has_single_predictor();
  }
  single_predictor_.SetAllocatedNoArena(&PredictorConsts::_default_single_predictor_.get(), single_predictor);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}

// optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
bool PredictorConsts::has_multi_predictor() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PredictorConsts::set_has_multi_predictor() {
  _has_bits_[0] |= 0x00000200u;
}
void PredictorConsts::clear_has_multi_predictor() {
  _has_bits_[0] &= ~0x00000200u;
}
void PredictorConsts::clear_multi_predictor() {
  multi_predictor_.ClearToDefaultNoArena(&PredictorConsts::_default_multi_predictor_.get());
  clear_has_multi_predictor();
}
const ::std::string& PredictorConsts::multi_predictor() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.MULTI_PREDICTOR)
  return multi_predictor_.GetNoArena();
}
void PredictorConsts::set_multi_predictor(const ::std::string& value) {
  set_has_multi_predictor();
  multi_predictor_.SetNoArena(&PredictorConsts::_default_multi_predictor_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
#if LANG_CXX11
void PredictorConsts::set_multi_predictor(::std::string&& value) {
  set_has_multi_predictor();
  multi_predictor_.SetNoArena(
    &PredictorConsts::_default_multi_predictor_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
#endif
void PredictorConsts::set_multi_predictor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_multi_predictor();
  multi_predictor_.SetNoArena(&PredictorConsts::_default_multi_predictor_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
void PredictorConsts::set_multi_predictor(const char* value, size_t size) {
  set_has_multi_predictor();
  multi_predictor_.SetNoArena(&PredictorConsts::_default_multi_predictor_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
::std::string* PredictorConsts::mutable_multi_predictor() {
  set_has_multi_predictor();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.MULTI_PREDICTOR)
  return multi_predictor_.MutableNoArena(&PredictorConsts::_default_multi_predictor_.get());
}
::std::string* PredictorConsts::release_multi_predictor() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.MULTI_PREDICTOR)
  clear_has_multi_predictor();
  return multi_predictor_.ReleaseNoArena(&PredictorConsts::_default_multi_predictor_.get());
}
void PredictorConsts::set_allocated_multi_predictor(::std::string* multi_predictor) {
  if (multi_predictor != NULL) {
    set_has_multi_predictor();
  } else {
    clear_has_multi_predictor();
  }
  multi_predictor_.SetAllocatedNoArena(&PredictorConsts::_default_multi_predictor_.get(), multi_predictor);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.MULTI_PREDICTOR)
}

// optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
bool PredictorConsts::has_train_init_plan_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PredictorConsts::set_has_train_init_plan_type() {
  _has_bits_[0] |= 0x00000400u;
}
void PredictorConsts::clear_has_train_init_plan_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void PredictorConsts::clear_train_init_plan_type() {
  train_init_plan_type_.ClearToDefaultNoArena(&PredictorConsts::_default_train_init_plan_type_.get());
  clear_has_train_init_plan_type();
}
const ::std::string& PredictorConsts::train_init_plan_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
  return train_init_plan_type_.GetNoArena();
}
void PredictorConsts::set_train_init_plan_type(const ::std::string& value) {
  set_has_train_init_plan_type();
  train_init_plan_type_.SetNoArena(&PredictorConsts::_default_train_init_plan_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
#if LANG_CXX11
void PredictorConsts::set_train_init_plan_type(::std::string&& value) {
  set_has_train_init_plan_type();
  train_init_plan_type_.SetNoArena(
    &PredictorConsts::_default_train_init_plan_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
#endif
void PredictorConsts::set_train_init_plan_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_train_init_plan_type();
  train_init_plan_type_.SetNoArena(&PredictorConsts::_default_train_init_plan_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
void PredictorConsts::set_train_init_plan_type(const char* value, size_t size) {
  set_has_train_init_plan_type();
  train_init_plan_type_.SetNoArena(&PredictorConsts::_default_train_init_plan_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
::std::string* PredictorConsts::mutable_train_init_plan_type() {
  set_has_train_init_plan_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
  return train_init_plan_type_.MutableNoArena(&PredictorConsts::_default_train_init_plan_type_.get());
}
::std::string* PredictorConsts::release_train_init_plan_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
  clear_has_train_init_plan_type();
  return train_init_plan_type_.ReleaseNoArena(&PredictorConsts::_default_train_init_plan_type_.get());
}
void PredictorConsts::set_allocated_train_init_plan_type(::std::string* train_init_plan_type) {
  if (train_init_plan_type != NULL) {
    set_has_train_init_plan_type();
  } else {
    clear_has_train_init_plan_type();
  }
  train_init_plan_type_.SetAllocatedNoArena(&PredictorConsts::_default_train_init_plan_type_.get(), train_init_plan_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}

// optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
bool PredictorConsts::has_train_plan_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PredictorConsts::set_has_train_plan_type() {
  _has_bits_[0] |= 0x00000800u;
}
void PredictorConsts::clear_has_train_plan_type() {
  _has_bits_[0] &= ~0x00000800u;
}
void PredictorConsts::clear_train_plan_type() {
  train_plan_type_.ClearToDefaultNoArena(&PredictorConsts::_default_train_plan_type_.get());
  clear_has_train_plan_type();
}
const ::std::string& PredictorConsts::train_plan_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
  return train_plan_type_.GetNoArena();
}
void PredictorConsts::set_train_plan_type(const ::std::string& value) {
  set_has_train_plan_type();
  train_plan_type_.SetNoArena(&PredictorConsts::_default_train_plan_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
#if LANG_CXX11
void PredictorConsts::set_train_plan_type(::std::string&& value) {
  set_has_train_plan_type();
  train_plan_type_.SetNoArena(
    &PredictorConsts::_default_train_plan_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
#endif
void PredictorConsts::set_train_plan_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_train_plan_type();
  train_plan_type_.SetNoArena(&PredictorConsts::_default_train_plan_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
void PredictorConsts::set_train_plan_type(const char* value, size_t size) {
  set_has_train_plan_type();
  train_plan_type_.SetNoArena(&PredictorConsts::_default_train_plan_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
::std::string* PredictorConsts::mutable_train_plan_type() {
  set_has_train_plan_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
  return train_plan_type_.MutableNoArena(&PredictorConsts::_default_train_plan_type_.get());
}
::std::string* PredictorConsts::release_train_plan_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
  clear_has_train_plan_type();
  return train_plan_type_.ReleaseNoArena(&PredictorConsts::_default_train_plan_type_.get());
}
void PredictorConsts::set_allocated_train_plan_type(::std::string* train_plan_type) {
  if (train_plan_type != NULL) {
    set_has_train_plan_type();
  } else {
    clear_has_train_plan_type();
  }
  train_plan_type_.SetAllocatedNoArena(&PredictorConsts::_default_train_plan_type_.get(), train_plan_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)
